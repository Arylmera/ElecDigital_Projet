CCS PCH C Compiler, Version 5.008, 5967               03-mai-20 13:32

               Filename:   W:\Ephec\ElecDigitalProjet\ccs\PIC-codeC\main.lst

               ROM used:   2140 bytes (7%)
                           Largest free fragment is 30624
               RAM used:   44 (3%) at main() level
                           59 (4%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   05D0
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F458.h> 
.................... //////// Standard Header file for the PIC18F458 device //////////////// 
.................... #device PIC18F458 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA 28,0C
00B2:  DATA 01,06
*
00E6:  DATA 20,50
00E8:  DATA 72,6F
00EA:  DATA 6A,65
00EC:  DATA 74,20
00EE:  DATA 45,6C
00F0:  DATA 65,63
00F2:  DATA 74,72
00F4:  DATA 6F,6E
00F6:  DATA 69,71
00F8:  DATA 75,65
00FA:  DATA 20,00
00FC:  DATA 20,32
00FE:  DATA 30,32
0100:  DATA 30,20
0102:  DATA 47,72
0104:  DATA 6F,75
0106:  DATA 70,65
0108:  DATA 20,33
010A:  DATA 20,00
010C:  DATA 20,4D
010E:  DATA 69,6E
0110:  DATA 56,61
0112:  DATA 6C,3A
0114:  DATA 20,00
0116:  DATA 20,44
0118:  DATA 69,73
011A:  DATA 74,61
011C:  DATA 6E,63
011E:  DATA 65,3A
0120:  DATA 20,00
*
0268:  MOVFF  FF2,0D
026C:  BCF    FF2.7
026E:  ADDWF  FE8,W
0270:  CLRF   FF7
0272:  RLCF   FF7,F
0274:  ADDLW  8D
0276:  MOVWF  FF6
0278:  MOVLW  02
027A:  ADDWFC FF7,F
027C:  TBLRD*-
027E:  MOVF   FF5,W
0280:  MOVWF  FFA
0282:  TBLRD*
0284:  MOVF   FF5,W
0286:  BTFSC  0D.7
0288:  BSF    FF2.7
028A:  MOVWF  FF9
028C:  DATA 42,02
028E:  DATA 48,02
0290:  DATA 4E,02
0292:  DATA 54,02
*
02DC:  TBLRD*+
02DE:  MOVF   FF5,F
02E0:  BZ    02FA
02E2:  MOVFF  FF6,2A
02E6:  MOVFF  FF7,2B
02EA:  MOVFF  FF5,30
02EE:  RCALL  0294
02F0:  MOVFF  2A,FF6
02F4:  MOVFF  2B,FF7
02F8:  BRA    02DC
02FA:  RETURN 0
*
0360:  CLRF   01
0362:  CLRF   02
0364:  CLRF   00
0366:  CLRF   03
0368:  MOVF   30,W
036A:  BNZ   0370
036C:  MOVF   2F,W
036E:  BZ    03A0
0370:  MOVLW  10
0372:  MOVWF  31
0374:  BCF    FD8.0
0376:  RLCF   2D,F
0378:  RLCF   2E,F
037A:  RLCF   00,F
037C:  RLCF   03,F
037E:  MOVF   30,W
0380:  SUBWF  03,W
0382:  BNZ   0388
0384:  MOVF   2F,W
0386:  SUBWF  00,W
0388:  BNC   0398
038A:  MOVF   2F,W
038C:  SUBWF  00,F
038E:  BTFSS  FD8.0
0390:  DECF   03,F
0392:  MOVF   30,W
0394:  SUBWF  03,F
0396:  BSF    FD8.0
0398:  RLCF   01,F
039A:  RLCF   02,F
039C:  DECFSZ 31,F
039E:  BRA    0374
03A0:  RETURN 0
03A2:  MOVFF  FEA,32
03A6:  MOVFF  FE9,31
03AA:  BTFSS  2B.7
03AC:  BRA    03BE
03AE:  BSF    31.7
03B0:  BTFSS  31.4
03B2:  INCF   31,F
03B4:  COMF   2A,F
03B6:  COMF   2B,F
03B8:  INCF   2A,F
03BA:  BTFSC  FD8.2
03BC:  INCF   2B,F
03BE:  SWAPF  2B,W
03C0:  IORLW  F0
03C2:  MOVWF  2D
03C4:  ADDWF  2D,F
03C6:  ADDLW  E2
03C8:  MOVWF  2E
03CA:  ADDLW  32
03CC:  MOVWF  30
03CE:  MOVF   2B,W
03D0:  ANDLW  0F
03D2:  ADDWF  2E,F
03D4:  ADDWF  2E,F
03D6:  ADDWF  30,F
03D8:  ADDLW  E9
03DA:  MOVWF  2F
03DC:  ADDWF  2F,F
03DE:  ADDWF  2F,F
03E0:  SWAPF  2A,W
03E2:  ANDLW  0F
03E4:  ADDWF  2F,F
03E6:  ADDWF  30,F
03E8:  RLCF   2F,F
03EA:  RLCF   30,F
03EC:  COMF   30,F
03EE:  RLCF   30,F
03F0:  MOVF   2A,W
03F2:  ANDLW  0F
03F4:  ADDWF  30,F
03F6:  RLCF   2D,F
03F8:  MOVLW  07
03FA:  MOVWF  2C
03FC:  MOVLW  0A
03FE:  DECF   2F,F
0400:  ADDWF  30,F
0402:  BNC   03FE
0404:  DECF   2E,F
0406:  ADDWF  2F,F
0408:  BNC   0404
040A:  DECF   2D,F
040C:  ADDWF  2E,F
040E:  BNC   040A
0410:  DECF   2C,F
0412:  ADDWF  2D,F
0414:  BNC   0410
0416:  CLRF   FEA
0418:  MOVLW  2C
041A:  MOVWF  FE9
041C:  MOVLW  07
041E:  ANDWF  31,W
0420:  BCF    31.6
0422:  DECF   FE9,F
0424:  ANDWF  31,W
0426:  BNZ   0436
0428:  BTFSC  31.4
042A:  INCF   FE9,F
042C:  BTFSC  31.4
042E:  BRA    0436
0430:  MOVLW  20
0432:  MOVWF  00
0434:  BRA    046E
0436:  ADDWF  FE9,F
0438:  MOVLW  30
043A:  SUBWF  FE9,W
043C:  BTFSC  FD8.2
043E:  BSF    31.6
0440:  MOVF   FEF,W
0442:  MOVWF  00
0444:  BNZ   0456
0446:  BTFSC  31.6
0448:  BRA    0456
044A:  BTFSC  31.4
044C:  BRA    0476
044E:  BTFSC  31.3
0450:  BRA    0456
0452:  MOVLW  20
0454:  BRA    046C
0456:  BTFSS  31.7
0458:  BRA    0466
045A:  MOVLW  2D
045C:  MOVWF  00
045E:  MOVF   FED,W
0460:  BCF    31.6
0462:  BCF    31.7
0464:  BRA    046E
0466:  BSF    31.3
0468:  BCF    31.4
046A:  MOVLW  30
046C:  ADDWF  00,F
046E:  MOVF   00,W
0470:  BTFSS  F9E.4
0472:  BRA    0470
0474:  MOVWF  FAD
0476:  MOVF   FEE,W
0478:  BTFSS  31.6
047A:  BRA    0438
047C:  GOTO   067A (RETURN)
0480:  MOVF   31,W
0482:  CLRF   01
0484:  SUBWF  30,W
0486:  BC    048E
0488:  MOVFF  30,00
048C:  BRA    04A6
048E:  CLRF   00
0490:  MOVLW  08
0492:  MOVWF  32
0494:  RLCF   30,F
0496:  RLCF   00,F
0498:  MOVF   31,W
049A:  SUBWF  00,W
049C:  BTFSC  FD8.0
049E:  MOVWF  00
04A0:  RLCF   01,F
04A2:  DECFSZ 32,F
04A4:  BRA    0494
04A6:  RETURN 0
04A8:  MOVLW  20
04AA:  BTFSS  2B.4
04AC:  MOVLW  30
04AE:  MOVWF  2C
04B0:  MOVFF  2A,00
04B4:  BTFSS  2A.7
04B6:  BRA    04C8
04B8:  COMF   00,F
04BA:  INCF   00,F
04BC:  MOVFF  00,2A
04C0:  MOVLW  2D
04C2:  MOVWF  2C
04C4:  BSF    2B.7
04C6:  BSF    2B.0
04C8:  MOVF   01,W
04CA:  MOVFF  2A,30
04CE:  MOVLW  64
04D0:  MOVWF  31
04D2:  RCALL  0480
04D4:  MOVFF  00,2A
04D8:  MOVLW  30
04DA:  ADDWF  01,W
04DC:  MOVWF  2D
04DE:  MOVFF  2A,30
04E2:  MOVLW  0A
04E4:  MOVWF  31
04E6:  RCALL  0480
04E8:  MOVLW  30
04EA:  ADDWF  00,W
04EC:  MOVWF  2F
04EE:  MOVLW  30
04F0:  ADDWF  01,W
04F2:  MOVWF  2E
04F4:  MOVFF  2C,00
04F8:  MOVLW  30
04FA:  SUBWF  2D,W
04FC:  BZ    0506
04FE:  BSF    2B.1
0500:  BTFSC  2B.7
0502:  BSF    2B.2
0504:  BRA    052A
0506:  MOVFF  2C,2D
050A:  MOVLW  20
050C:  MOVWF  2C
050E:  MOVLW  30
0510:  SUBWF  2E,W
0512:  BZ    051C
0514:  BSF    2B.0
0516:  BTFSC  2B.7
0518:  BSF    2B.1
051A:  BRA    052A
051C:  BTFSS  FD8.2
051E:  BSF    2B.0
0520:  BNZ   052A
0522:  MOVFF  2D,2E
0526:  MOVLW  20
0528:  MOVWF  2D
052A:  BTFSC  2B.2
052C:  BRA    0538
052E:  BTFSC  2B.1
0530:  BRA    053E
0532:  BTFSC  2B.0
0534:  BRA    0544
0536:  BRA    054A
0538:  MOVFF  2C,30
053C:  RCALL  0294
053E:  MOVFF  2D,30
0542:  RCALL  0294
0544:  MOVFF  2E,30
0548:  RCALL  0294
054A:  MOVFF  2F,30
054E:  RCALL  0294
0550:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20MHz) 
*
0122:  CLRF   FEA
0124:  MOVLW  31
0126:  MOVWF  FE9
0128:  MOVF   FEF,W
012A:  BZ    0146
012C:  MOVLW  06
012E:  MOVWF  01
0130:  CLRF   00
0132:  DECFSZ 00,F
0134:  BRA    0132
0136:  DECFSZ 01,F
0138:  BRA    0130
013A:  MOVLW  7B
013C:  MOVWF  00
013E:  DECFSZ 00,F
0140:  BRA    013E
0142:  DECFSZ FEF,F
0144:  BRA    012C
0146:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=0,rcv=0,bits=8,stream=PORT1) 
....................  
.................... #define LED PIN_None 
.................... #define DELAY 1000 
....................  
....................  
....................  
.................... #include "LCD420.c" 
.................... /////////////////////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                                                  //// 
.................... ////            Driver for common 4x20 LCD modules  (Fonction de haut niveau )             //// 
.................... ////                                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.                               //// 
.................... ////                                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.                         //// 
.................... ////                     The following have special meaning:                               //// 
.................... ////                      \f  Clear display                                                //// 
.................... ////                      \n  Go to start of second line                                   //// 
.................... ////                      \b  Move back one position                                       //// 
.................... ////                                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1 -> 20,4)                //// 
.................... ////                                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD                             //// 
.................... ////                                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services                               //// 
.................... //// This source code may only be used by licensed users of the CCS C                      //// 
.................... //// compiler.  This source code may only be distributed to other                          //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction                     //// 
.................... //// or distribution is permitted without written permission.                              //// 
.................... //// Derivative programs created using this software in object code                        //// 
.................... //// form are not restricted in any way.                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed ( Mettre dans l'ordre de poid faible ? fort ) 
....................            int     data : 4;         // be pin B0. 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................  
....................         } lcd; 
....................  
.................... #byte lcd = 0xF83                        // This puts the entire structure ( se trouve ? la page 47 du datasheet dans "SPECIAL FUNCTION REGISTER MAP" ) 
....................                                          // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {15,0,0,0,0}; // For read mode data pins are in  ( 15 car les 4 bits du lcd doivent etre ? l'?tat haut et du cot? gauche car d?plac? en premiere ligne dans struct ) 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() {  // Fonction de bas niveau 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
016A:  MOVLW  0F
016C:  MOVWF  F95
....................       lcd.rw = 1; 
016E:  BSF    F83.5
....................       delay_cycles(1); 
0170:  NOP   
....................       lcd.enable = 1; 
0172:  BSF    F83.6
....................       delay_cycles(1); 
0174:  NOP   
....................       high = lcd.data; 
0176:  MOVF   F83,W
0178:  ANDLW  0F
017A:  MOVWF  37
....................       lcd.enable = 0; 
017C:  BCF    F83.6
....................       delay_cycles(1); 
017E:  NOP   
....................       lcd.enable = 1; 
0180:  BSF    F83.6
....................       delay_us(1); 
0182:  BRA    0184
0184:  BRA    0186
0186:  NOP   
....................       low = lcd.data; 
0188:  MOVF   F83,W
018A:  ANDLW  0F
018C:  MOVWF  36
....................       lcd.enable = 0; 
018E:  BCF    F83.6
....................       set_tris_d(LCD_WRITE); 
0190:  MOVLW  00
0192:  MOVWF  F95
....................       return( (high<<4) | low); 
0194:  SWAPF  37,W
0196:  MOVWF  00
0198:  MOVLW  F0
019A:  ANDWF  00,F
019C:  MOVF   00,W
019E:  IORWF  36,W
01A0:  MOVWF  01
01A2:  GOTO   01AA (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) {  // Fonction de bas niveau 
....................       lcd.data = n; 
*
0148:  MOVF   37,W
014A:  ANDLW  0F
014C:  MOVWF  00
014E:  MOVLW  F0
0150:  ANDWF  F83,W
0152:  IORWF  00,W
0154:  MOVWF  F83
....................       delay_cycles(1); 
0156:  NOP   
....................       lcd.enable = 1; 
0158:  BSF    F83.6
....................       delay_us(2); 
015A:  MOVLW  02
015C:  MOVWF  00
015E:  DECFSZ 00,F
0160:  BRA    015E
0162:  BRA    0164
0164:  NOP   
....................       lcd.enable = 0; 
0166:  BCF    F83.6
0168:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) {  // Fonction de bas niveau 
....................  
....................       lcd.rs = 0; 
*
01A6:  BCF    F83.4
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
01A8:  BRA    016A
01AA:  MOVFF  01,36
01AE:  BTFSC  01.7
01B0:  BRA    01A8
....................       lcd.rs = address; 
01B2:  BTFSS  34.0
01B4:  BCF    F83.4
01B6:  BTFSC  34.0
01B8:  BSF    F83.4
....................       delay_cycles(1); 
01BA:  NOP   
....................       lcd.rw = 0; 
01BC:  BCF    F83.5
....................       delay_cycles(1); 
01BE:  NOP   
....................       lcd.enable = 0; 
01C0:  BCF    F83.6
....................       lcd_send_nibble(n >> 4); 
01C2:  SWAPF  35,W
01C4:  MOVWF  36
01C6:  MOVLW  0F
01C8:  ANDWF  36,F
01CA:  MOVFF  36,37
01CE:  RCALL  0148
....................       lcd_send_nibble(n & 0xf); 
01D0:  MOVF   35,W
01D2:  ANDLW  0F
01D4:  MOVWF  36
01D6:  MOVWF  37
01D8:  RCALL  0148
01DA:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
01DC:  MOVLW  00
01DE:  MOVWF  F95
....................     lcd.rs = 0; 
01E0:  BCF    F83.4
....................     lcd.rw = 0; 
01E2:  BCF    F83.5
....................     lcd.enable = 0; 
01E4:  BCF    F83.6
....................     delay_ms(15); 
01E6:  MOVLW  0F
01E8:  MOVWF  31
01EA:  RCALL  0122
....................     for(i=1;i<=3;++i) { 
01EC:  MOVLW  01
01EE:  MOVWF  2A
01F0:  MOVF   2A,W
01F2:  SUBLW  03
01F4:  BNC   0206
....................        lcd_send_nibble(3); 
01F6:  MOVLW  03
01F8:  MOVWF  37
01FA:  RCALL  0148
....................        delay_ms(5); 
01FC:  MOVLW  05
01FE:  MOVWF  31
0200:  RCALL  0122
0202:  INCF   2A,F
0204:  BRA    01F0
....................     } 
....................     lcd_send_nibble(2); 
0206:  MOVLW  02
0208:  MOVWF  37
020A:  RCALL  0148
....................     for(i=0;i<=3;++i) 
020C:  CLRF   2A
020E:  MOVF   2A,W
0210:  SUBLW  03
0212:  BNC   0230
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0214:  CLRF   03
0216:  MOVF   2A,W
0218:  MOVFF  FF2,2B
021C:  BCF    FF2.7
021E:  RCALL  0096
0220:  BTFSC  2B.7
0222:  BSF    FF2.7
0224:  MOVWF  2B
0226:  CLRF   34
0228:  MOVWF  35
022A:  RCALL  01A6
022C:  INCF   2A,F
022E:  BRA    020E
0230:  GOTO   0628 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0234:  MOVLW  01
0236:  SUBWF  32,W
0238:  ADDLW  FC
023A:  BC    0258
023C:  ADDLW  04
023E:  GOTO   0268
....................      case 1 : address=0x80;break; 
0242:  MOVLW  80
0244:  MOVWF  33
0246:  BRA    0258
....................      case 2 : address=0xc0;break; 
0248:  MOVLW  C0
024A:  MOVWF  33
024C:  BRA    0258
....................      case 3 : address=0x94;break; 
024E:  MOVLW  94
0250:  MOVWF  33
0252:  BRA    0258
....................      case 4 : address=0xd4;break; 
0254:  MOVLW  D4
0256:  MOVWF  33
....................    } 
....................    address+=x-1; 
0258:  MOVLW  01
025A:  SUBWF  31,W
025C:  ADDWF  33,F
....................    lcd_send_byte(0,address); 
025E:  CLRF   34
0260:  MOVFF  33,35
0264:  RCALL  01A6
0266:  RETURN 0
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0294:  MOVF   30,W
0296:  XORLW  0C
0298:  BZ    02A4
029A:  XORLW  06
029C:  BZ    02B8
029E:  XORLW  02
02A0:  BZ    02C6
02A2:  BRA    02D0
....................      case '\f'   : lcd_send_byte(0,1); 
02A4:  CLRF   34
02A6:  MOVLW  01
02A8:  MOVWF  35
02AA:  RCALL  01A6
....................                    lcdline=1; 
02AC:  MOVLW  01
02AE:  MOVWF  16
....................                    delay_ms(2); 
02B0:  MOVLW  02
02B2:  MOVWF  31
02B4:  RCALL  0122
....................                                            break; 
02B6:  BRA    02DA
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
02B8:  INCF   16,F
02BA:  MOVLW  01
02BC:  MOVWF  31
02BE:  MOVFF  16,32
02C2:  RCALL  0234
02C4:  BRA    02DA
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02C6:  CLRF   34
02C8:  MOVLW  10
02CA:  MOVWF  35
02CC:  RCALL  01A6
02CE:  BRA    02DA
....................      default     : lcd_send_byte(1,c);     break; 
02D0:  MOVLW  01
02D2:  MOVWF  34
02D4:  MOVFF  30,35
02D8:  RCALL  01A6
....................    } 
02DA:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #use fast_io(C) 
....................  
.................... #use rs232(baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... #define trigger pin_C0 
.................... #define echo pin_C1 
.................... #define dot pin_E2 
.................... #define RX pin_C7 
.................... #define TX pin_C6 
.................... #define GREEN pin_E0 
.................... #define RED pin_E1 
....................  
.................... #int_TIMER1 
....................  
.................... int16 time, distance, x, i, minVal; 
.................... boolean flag=0; 
.................... char buffer[4]; 
.................... int8 j=0; 
.................... int8 c,d,u; 
....................  
.................... #INT_RDA 
.................... void RDA_isr(void) { 
....................   buffer[j]=getc(); 
*
00B4:  CLRF   03
00B6:  MOVF   26,W
00B8:  ADDLW  22
00BA:  MOVWF  FE9
00BC:  MOVLW  00
00BE:  ADDWFC 03,W
00C0:  MOVWF  FEA
00C2:  BTFSS  F9E.5
00C4:  BRA    00C2
00C6:  MOVFF  FAE,FEF
....................   if(buffer[0]=='!' && flag==0) { 
00CA:  MOVF   22,W
00CC:  SUBLW  21
00CE:  BNZ   00E0
00D0:  BTFSC  21.0
00D2:  BRA    00E0
....................     j++; 
00D4:  INCF   26,F
....................     if(j>=4) { 
00D6:  MOVF   26,W
00D8:  SUBLW  03
00DA:  BC    00E0
....................       j=0; 
00DC:  CLRF   26
....................       flag=1; 
00DE:  BSF    21.0
....................     } 
....................   } 
00E0:  BCF    F9E.5
00E2:  GOTO   0054
.................... } 
....................  
.................... /* 
.................... * transofmation de la valeur en valeur base 16 
.................... */ 
.................... int16 outputValueParser(int16 value){ 
*
0552:  CLRF   2C
....................    int output = 0; 
....................    if (value < 10) { output = value;} 
0554:  MOVF   2B,F
0556:  BNZ   0564
0558:  MOVF   2A,W
055A:  SUBLW  09
055C:  BNC   0564
055E:  MOVFF  2A,2C
0562:  BRA    05C2
....................    else { 
....................     x = value; 
0564:  MOVFF  2B,1C
0568:  MOVFF  2A,1B
....................     x = x % 10; 
056C:  MOVFF  1C,2E
0570:  MOVFF  1B,2D
0574:  CLRF   30
0576:  MOVLW  0A
0578:  MOVWF  2F
057A:  RCALL  0360
057C:  MOVFF  00,1B
0580:  MOVFF  03,1C
....................     i = value; 
0584:  MOVFF  2B,1E
0588:  MOVFF  2A,1D
....................     i = i/10; 
058C:  MOVFF  1E,2E
0590:  MOVFF  1D,2D
0594:  CLRF   30
0596:  MOVLW  0A
0598:  MOVWF  2F
059A:  RCALL  0360
059C:  MOVFF  02,1E
05A0:  MOVFF  01,1D
....................  
....................     output = x + i*16; 
05A4:  RLCF   1D,W
05A6:  MOVWF  02
05A8:  RLCF   1E,W
05AA:  MOVWF  03
05AC:  RLCF   02,F
05AE:  RLCF   03,F
05B0:  RLCF   02,F
05B2:  RLCF   03,F
05B4:  RLCF   02,F
05B6:  RLCF   03,F
05B8:  MOVLW  F0
05BA:  ANDWF  02,F
05BC:  MOVF   02,W
05BE:  ADDWF  1B,W
05C0:  MOVWF  2C
....................    } 
....................    return output; 
05C2:  CLRF   03
05C4:  MOVFF  2C,01
05C8:  MOVFF  03,02
05CC:  GOTO   0848 (RETURN)
.................... } 
....................  
.................... /* 
.................... * trigger de la sonde 
.................... */ 
.................... void triggerSonde(){ 
....................    output_high(trigger); 
*
034E:  BSF    F8B.0
....................    delay_us(10); 
0350:  MOVLW  10
0352:  MOVWF  00
0354:  DECFSZ 00,F
0356:  BRA    0354
0358:  NOP   
....................    output_low(trigger); 
035A:  BCF    F8B.0
035C:  GOTO   0636 (RETURN)
.................... } 
....................  
.................... /* 
.................... * Fonctione d'initalisation du LCD 
.................... */ 
.................... void init_lcd(){ 
....................    delay_ms(500); 
*
02FC:  MOVLW  02
02FE:  MOVWF  2A
0300:  MOVLW  FA
0302:  MOVWF  31
0304:  RCALL  0122
0306:  DECFSZ 2A,F
0308:  BRA    0300
....................    lcd_putc('\f'); 
030A:  MOVLW  0C
030C:  MOVWF  30
030E:  RCALL  0294
....................    lcd_gotoxy(1,1); 
0310:  MOVLW  01
0312:  MOVWF  31
0314:  MOVWF  32
0316:  RCALL  0234
....................    printf(lcd_putc," Projet Electronique "); 
0318:  MOVLW  E6
031A:  MOVWF  FF6
031C:  MOVLW  00
031E:  MOVWF  FF7
0320:  RCALL  02DC
....................    lcd_gotoxy(1,3); 
0322:  MOVLW  01
0324:  MOVWF  31
0326:  MOVLW  03
0328:  MOVWF  32
032A:  RCALL  0234
....................    printf(lcd_putc," 2020 Groupe 3 "); 
032C:  MOVLW  FC
032E:  MOVWF  FF6
0330:  MOVLW  00
0332:  MOVWF  FF7
0334:  RCALL  02DC
....................    delay_ms(1000); 
0336:  MOVLW  04
0338:  MOVWF  2A
033A:  MOVLW  FA
033C:  MOVWF  31
033E:  RCALL  0122
0340:  DECFSZ 2A,F
0342:  BRA    033A
....................    lcd_putc('\f'); 
0344:  MOVLW  0C
0346:  MOVWF  30
0348:  RCALL  0294
034A:  GOTO   062A (RETURN)
.................... } 
....................  
....................  
.................... /* 
.................... * fonction principale 
.................... */ 
.................... void main() 
*
05D0:  CLRF   FF8
05D2:  BCF    FD0.7
05D4:  BSF    07.7
05D6:  BSF    00.0
05D8:  MOVLW  81
05DA:  MOVWF  FAF
05DC:  MOVLW  A6
05DE:  MOVWF  FAC
05E0:  MOVLW  90
05E2:  MOVWF  FAB
05E4:  BCF    21.0
05E6:  CLRF   26
05E8:  BSF    FC1.0
05EA:  BSF    FC1.1
05EC:  BSF    FC1.2
05EE:  BCF    FC1.3
05F0:  MOVLW  07
05F2:  MOVWF  FB4
.................... { 
....................    setup_low_volt_detect(FALSE); 
05F4:  CLRF   FD2
....................    set_tris_c(0b01000010); // set RC1 as input (ECHO) 
05F6:  MOVLW  42
05F8:  MOVWF  F94
....................  
....................    setup_spi(FALSE); 
05FA:  CLRF   FC6
....................    setup_wdt(WDT_OFF); 
05FC:  BCF    FD1.0
....................    setup_timer_1( T1_INTERNAL | T1_DIV_BY_1  ); 
05FE:  MOVLW  85
0600:  MOVWF  FCD
....................    setup_comparator(NC_NC_NC_NC); 
0602:  MOVLW  07
0604:  MOVWF  FB4
0606:  MOVF   F95,W
0608:  MOVWF  F95
060A:  MOVF   F96,W
060C:  MOVWF  F96
060E:  MOVLW  10
0610:  MOVWF  00
0612:  DECFSZ 00,F
0614:  BRA    0612
0616:  NOP   
0618:  MOVF   FB4,W
061A:  BCF    FA1.6
....................    setup_vref(FALSE); 
061C:  CLRF   FB5
....................  
....................    enable_interrupts(INT_RDA); // interuption sur r�ception port RS232 
061E:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
0620:  MOVLW  C0
0622:  IORWF  FF2,F
....................    setup_oscillator(False); 
0624:  CLRF   FD3
....................  
....................    lcd_init(); 
0626:  BRA    01DC
....................    init_lcd(); 
0628:  BRA    02FC
....................  
....................    while(true) 
....................    { 
....................  
....................    // setup des valeurs 
....................    time = 0; 
062A:  CLRF   18
062C:  CLRF   17
....................  
....................    // recuperation minValue envoye par JAVA 
....................    minVal = 100; 
062E:  CLRF   20
0630:  MOVLW  64
0632:  MOVWF  1F
....................  
....................    // d�clanchement de la sonde 
....................    triggerSonde(); 
0634:  BRA    034E
....................  
....................    // recuperation valeur temps de la sonde 
....................    while(input(echo) == 0){} // attente debut 
0636:  BTFSS  F82.1
0638:  BRA    0636
....................    set_timer1(0); 
063A:  CLRF   FCF
063C:  CLRF   FCE
....................    while(input(echo) == 1){} // attente fin 
063E:  BTFSC  F82.1
0640:  BRA    063E
....................    time = get_timer1(); 
0642:  MOVF   FCE,W
0644:  MOVWF  17
0646:  MOVFF  FCF,18
....................  
....................    // temps => distance 
....................    distance = time/285; 
064A:  MOVFF  18,2E
064E:  MOVFF  17,2D
0652:  MOVLW  01
0654:  MOVWF  30
0656:  MOVLW  1D
0658:  MOVWF  2F
065A:  RCALL  0360
065C:  MOVFF  02,1A
0660:  MOVFF  01,19
....................  
....................    // envoie distance ici java 
....................    printf(" %ld", distance); 
0664:  MOVLW  20
0666:  BTFSS  F9E.4
0668:  BRA    0666
066A:  MOVWF  FAD
066C:  MOVLW  10
066E:  MOVWF  FE9
0670:  MOVFF  1A,2B
0674:  MOVFF  19,2A
0678:  BRA    03A2
....................    printf("\n"); 
067A:  MOVLW  0A
067C:  BTFSS  F9E.4
067E:  BRA    067C
0680:  MOVWF  FAD
....................  
....................    // si donn�es recu depuis java sur RS232 > interuption INT_RSA 
....................    if(flag==1){ 
0682:  BTFSS  21.0
0684:  BRA    06B0
....................      flag=0; 
0686:  BCF    21.0
....................      c=buffer[1]-48; 
0688:  MOVLW  30
068A:  SUBWF  23,W
068C:  MOVWF  27
....................      d=buffer[2]-48; 
068E:  MOVLW  30
0690:  SUBWF  24,W
0692:  MOVWF  28
....................      u=buffer[3]-48; 
0694:  MOVLW  30
0696:  SUBWF  25,W
0698:  MOVWF  29
....................      minVal=(int16) (c*100+d*10+u); 
069A:  MOVF   27,W
069C:  MULLW  64
069E:  MOVFF  FF3,2A
06A2:  MOVF   28,W
06A4:  MULLW  0A
06A6:  MOVF   FF3,W
06A8:  ADDWF  2A,W
06AA:  ADDWF  29,W
06AC:  CLRF   20
06AE:  MOVWF  1F
....................    } 
....................  
....................    // cr�ation valeurs LCD MINvalue 
....................    c = minVal/100; 
06B0:  MOVFF  20,2E
06B4:  MOVFF  1F,2D
06B8:  CLRF   30
06BA:  MOVLW  64
06BC:  MOVWF  2F
06BE:  RCALL  0360
06C0:  MOVFF  01,27
....................    d = (minVal-(c*100))/10; 
06C4:  MOVF   27,W
06C6:  MULLW  64
06C8:  MOVF   FF3,W
06CA:  SUBWF  1F,W
06CC:  MOVWF  2A
06CE:  MOVLW  00
06D0:  SUBWFB 20,W
06D2:  MOVWF  2B
06D4:  MOVWF  2E
06D6:  MOVFF  2A,2D
06DA:  CLRF   30
06DC:  MOVLW  0A
06DE:  MOVWF  2F
06E0:  RCALL  0360
06E2:  MOVFF  01,28
....................    u = (minVal-(c*100))-(d*10); 
06E6:  MOVF   27,W
06E8:  MULLW  64
06EA:  MOVF   FF3,W
06EC:  SUBWF  1F,W
06EE:  MOVWF  2A
06F0:  MOVLW  00
06F2:  SUBWFB 20,W
06F4:  MOVF   28,W
06F6:  MULLW  0A
06F8:  MOVF   FF3,W
06FA:  SUBWF  2A,W
06FC:  MOVWF  29
....................    // Affichage MinValue LCD 
....................    lcd_gotoxy(3,1); 
06FE:  MOVLW  03
0700:  MOVWF  31
0702:  MOVLW  01
0704:  MOVWF  32
0706:  RCALL  0234
....................    printf(lcd_putc, " MinVal: "); 
0708:  MOVLW  0C
070A:  MOVWF  FF6
070C:  MOVLW  01
070E:  MOVWF  FF7
0710:  RCALL  02DC
....................    printf(lcd_putc, " %d", c); 
0712:  MOVLW  20
0714:  MOVWF  30
0716:  RCALL  0294
0718:  MOVFF  27,2A
071C:  MOVLW  18
071E:  MOVWF  2B
0720:  RCALL  04A8
....................    printf(lcd_putc, " %d", d); 
0722:  MOVLW  20
0724:  MOVWF  30
0726:  RCALL  0294
0728:  MOVFF  28,2A
072C:  MOVLW  18
072E:  MOVWF  2B
0730:  RCALL  04A8
....................    printf(lcd_putc, " %d", u); 
0732:  MOVLW  20
0734:  MOVWF  30
0736:  RCALL  0294
0738:  MOVFF  29,2A
073C:  MOVLW  18
073E:  MOVWF  2B
0740:  RCALL  04A8
....................    // cr�eation valeurs Distance LCD 
....................    c = distance/100; 
0742:  MOVFF  1A,2E
0746:  MOVFF  19,2D
074A:  CLRF   30
074C:  MOVLW  64
074E:  MOVWF  2F
0750:  RCALL  0360
0752:  MOVFF  01,27
....................    d = (distance-(c*100))/10; 
0756:  MOVF   27,W
0758:  MULLW  64
075A:  MOVF   FF3,W
075C:  SUBWF  19,W
075E:  MOVWF  2A
0760:  MOVLW  00
0762:  SUBWFB 1A,W
0764:  MOVWF  2B
0766:  MOVWF  2E
0768:  MOVFF  2A,2D
076C:  CLRF   30
076E:  MOVLW  0A
0770:  MOVWF  2F
0772:  RCALL  0360
0774:  MOVFF  01,28
....................    u = (distance-(c*100))-(d*10); 
0778:  MOVF   27,W
077A:  MULLW  64
077C:  MOVF   FF3,W
077E:  SUBWF  19,W
0780:  MOVWF  2A
0782:  MOVLW  00
0784:  SUBWFB 1A,W
0786:  MOVF   28,W
0788:  MULLW  0A
078A:  MOVF   FF3,W
078C:  SUBWF  2A,W
078E:  MOVWF  29
....................    // affichage distance LCD 
....................    lcd_gotoxy(3,3); 
0790:  MOVLW  03
0792:  MOVWF  31
0794:  MOVWF  32
0796:  RCALL  0234
....................    printf(lcd_putc, " Distance: "); 
0798:  MOVLW  16
079A:  MOVWF  FF6
079C:  MOVLW  01
079E:  MOVWF  FF7
07A0:  RCALL  02DC
....................    printf(lcd_putc, " %d", c); 
07A2:  MOVLW  20
07A4:  MOVWF  30
07A6:  RCALL  0294
07A8:  MOVFF  27,2A
07AC:  MOVLW  18
07AE:  MOVWF  2B
07B0:  RCALL  04A8
....................    printf(lcd_putc, " %d", d); 
07B2:  MOVLW  20
07B4:  MOVWF  30
07B6:  RCALL  0294
07B8:  MOVFF  28,2A
07BC:  MOVLW  18
07BE:  MOVWF  2B
07C0:  RCALL  04A8
....................    printf(lcd_putc, " %d", u); 
07C2:  MOVLW  20
07C4:  MOVWF  30
07C6:  RCALL  0294
07C8:  MOVFF  29,2A
07CC:  MOVLW  18
07CE:  MOVWF  2B
07D0:  RCALL  04A8
....................  
....................    // v�rification borne minVal 
....................    if (distance < minVal){ 
07D2:  MOVF   1A,W
07D4:  SUBWF  20,W
07D6:  BNC   07FA
07D8:  BNZ   07E0
07DA:  MOVF   1F,W
07DC:  SUBWF  19,W
07DE:  BC    07FA
....................       // allumer red => trop proche 
....................       printf("1\n"); 
07E0:  MOVLW  31
07E2:  BTFSS  F9E.4
07E4:  BRA    07E2
07E6:  MOVWF  FAD
07E8:  MOVLW  0A
07EA:  BTFSS  F9E.4
07EC:  BRA    07EA
07EE:  MOVWF  FAD
....................       output_high(RED); 
07F0:  BCF    F96.1
07F2:  BSF    F8D.1
....................       output_low(GREEN); 
07F4:  BCF    F96.0
07F6:  BCF    F8D.0
....................    } 
07F8:  BRA    0812
....................    else { 
....................       // allumer green => OK 
....................       printf("2\n"); 
07FA:  MOVLW  32
07FC:  BTFSS  F9E.4
07FE:  BRA    07FC
0800:  MOVWF  FAD
0802:  MOVLW  0A
0804:  BTFSS  F9E.4
0806:  BRA    0804
0808:  MOVWF  FAD
....................       output_high(GREEN); 
080A:  BCF    F96.0
080C:  BSF    F8D.0
....................       output_low(RED); 
080E:  BCF    F96.1
0810:  BCF    F8D.1
....................    } 
....................  
....................    // gestion du point si > que 100 !> cm -> m 
....................    if(distance > 99){ 
0812:  MOVF   1A,F
0814:  BNZ   081C
0816:  MOVF   19,W
0818:  SUBLW  63
081A:  BC    083A
....................       distance = distance / 10; 
081C:  MOVFF  1A,2E
0820:  MOVFF  19,2D
0824:  CLRF   30
0826:  MOVLW  0A
0828:  MOVWF  2F
082A:  RCALL  0360
082C:  MOVFF  02,1A
0830:  MOVFF  01,19
....................       output_high(dot); 
0834:  BCF    F96.2
0836:  BSF    F8D.2
....................    } 
0838:  BRA    083E
....................    else { 
....................       output_low(dot); 
083A:  BCF    F96.2
083C:  BCF    F8D.2
....................    } 
....................  
....................    // affichage sur 7seg de la distance 
....................    output_b(outputValueParser(distance)); 
083E:  MOVFF  1A,2B
0842:  MOVFF  19,2A
0846:  BRA    0552
0848:  CLRF   F93
084A:  MOVFF  01,F8A
....................  
....................  
....................    // attente pour eviter spam 
....................    delay_ms(500); 
084E:  MOVLW  02
0850:  MOVWF  2A
0852:  MOVLW  FA
0854:  MOVWF  31
0856:  RCALL  0122
0858:  DECFSZ 2A,F
085A:  BRA    0852
085C:  BRA    062A
....................    } 
....................  
.................... } 
085E:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV25 NOWDT WDT128
   Word  3: 0000  
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
