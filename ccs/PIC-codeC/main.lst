CCS PCH C Compiler, Version 5.008, 5967               27-avr.-20 15:14

               Filename:   W:\Ephec\ElecDigitalProjet\ccs\PIC-codeC\main.lst

               ROM used:   1980 bytes (6%)
                           Largest free fragment is 30784
               RAM used:   44 (3%) at main() level
                           59 (4%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   05E4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F458.h> 
.................... //////// Standard Header file for the PIC18F458 device //////////////// 
.................... #device PIC18F458 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA 28,0C
00B2:  DATA 01,06
*
00E6:  DATA 50,72
00E8:  DATA 6F,6A
00EA:  DATA 65,74
00EC:  DATA 20,45
00EE:  DATA 6C,65
00F0:  DATA 63,74
00F2:  DATA 72,6F
00F4:  DATA 6E,69
00F6:  DATA 71,75
00F8:  DATA 65,20
00FA:  DATA 32,30
00FC:  DATA 32,30
00FE:  DATA 20,00
0100:  DATA 47,72
0102:  DATA 6F,75
0104:  DATA 70,65
0106:  DATA 20,32
0108:  DATA 00,00
010A:  DATA 6C,69
010C:  DATA 6D,69
010E:  DATA 74,65
0110:  DATA 3A,20
0112:  DATA 00,00
*
025A:  MOVFF  FF2,0D
025E:  BCF    FF2.7
0260:  ADDWF  FE8,W
0262:  CLRF   FF7
0264:  RLCF   FF7,F
0266:  ADDLW  7F
0268:  MOVWF  FF6
026A:  MOVLW  02
026C:  ADDWFC FF7,F
026E:  TBLRD*-
0270:  MOVF   FF5,W
0272:  MOVWF  FFA
0274:  TBLRD*
0276:  MOVF   FF5,W
0278:  BTFSC  0D.7
027A:  BSF    FF2.7
027C:  MOVWF  FF9
027E:  DATA 34,02
0280:  DATA 3A,02
0282:  DATA 40,02
0284:  DATA 46,02
*
02CE:  TBLRD*+
02D0:  MOVF   FF5,F
02D2:  BZ    02EC
02D4:  MOVFF  FF6,2A
02D8:  MOVFF  FF7,2B
02DC:  MOVFF  FF5,30
02E0:  RCALL  0286
02E2:  MOVFF  2A,FF6
02E6:  MOVFF  2B,FF7
02EA:  BRA    02CE
02EC:  RETURN 0
*
0356:  CLRF   01
0358:  CLRF   02
035A:  CLRF   00
035C:  CLRF   03
035E:  MOVF   30,W
0360:  BNZ   0366
0362:  MOVF   2F,W
0364:  BZ    0396
0366:  MOVLW  10
0368:  MOVWF  31
036A:  BCF    FD8.0
036C:  RLCF   2D,F
036E:  RLCF   2E,F
0370:  RLCF   00,F
0372:  RLCF   03,F
0374:  MOVF   30,W
0376:  SUBWF  03,W
0378:  BNZ   037E
037A:  MOVF   2F,W
037C:  SUBWF  00,W
037E:  BNC   038E
0380:  MOVF   2F,W
0382:  SUBWF  00,F
0384:  BTFSS  FD8.0
0386:  DECF   03,F
0388:  MOVF   30,W
038A:  SUBWF  03,F
038C:  BSF    FD8.0
038E:  RLCF   01,F
0390:  RLCF   02,F
0392:  DECFSZ 31,F
0394:  BRA    036A
0396:  RETURN 0
*
03B6:  MOVFF  FEA,32
03BA:  MOVFF  FE9,31
03BE:  BTFSS  2B.7
03C0:  BRA    03D2
03C2:  BSF    31.7
03C4:  BTFSS  31.4
03C6:  INCF   31,F
03C8:  COMF   2A,F
03CA:  COMF   2B,F
03CC:  INCF   2A,F
03CE:  BTFSC  FD8.2
03D0:  INCF   2B,F
03D2:  SWAPF  2B,W
03D4:  IORLW  F0
03D6:  MOVWF  2D
03D8:  ADDWF  2D,F
03DA:  ADDLW  E2
03DC:  MOVWF  2E
03DE:  ADDLW  32
03E0:  MOVWF  30
03E2:  MOVF   2B,W
03E4:  ANDLW  0F
03E6:  ADDWF  2E,F
03E8:  ADDWF  2E,F
03EA:  ADDWF  30,F
03EC:  ADDLW  E9
03EE:  MOVWF  2F
03F0:  ADDWF  2F,F
03F2:  ADDWF  2F,F
03F4:  SWAPF  2A,W
03F6:  ANDLW  0F
03F8:  ADDWF  2F,F
03FA:  ADDWF  30,F
03FC:  RLCF   2F,F
03FE:  RLCF   30,F
0400:  COMF   30,F
0402:  RLCF   30,F
0404:  MOVF   2A,W
0406:  ANDLW  0F
0408:  ADDWF  30,F
040A:  RLCF   2D,F
040C:  MOVLW  07
040E:  MOVWF  2C
0410:  MOVLW  0A
0412:  DECF   2F,F
0414:  ADDWF  30,F
0416:  BNC   0412
0418:  DECF   2E,F
041A:  ADDWF  2F,F
041C:  BNC   0418
041E:  DECF   2D,F
0420:  ADDWF  2E,F
0422:  BNC   041E
0424:  DECF   2C,F
0426:  ADDWF  2D,F
0428:  BNC   0424
042A:  CLRF   FEA
042C:  MOVLW  2C
042E:  MOVWF  FE9
0430:  MOVLW  07
0432:  ANDWF  31,W
0434:  BCF    31.6
0436:  DECF   FE9,F
0438:  ANDWF  31,W
043A:  BNZ   044A
043C:  BTFSC  31.4
043E:  INCF   FE9,F
0440:  BTFSC  31.4
0442:  BRA    044A
0444:  MOVLW  20
0446:  MOVWF  00
0448:  BRA    0482
044A:  ADDWF  FE9,F
044C:  MOVLW  30
044E:  SUBWF  FE9,W
0450:  BTFSC  FD8.2
0452:  BSF    31.6
0454:  MOVF   FEF,W
0456:  MOVWF  00
0458:  BNZ   046A
045A:  BTFSC  31.6
045C:  BRA    046A
045E:  BTFSC  31.4
0460:  BRA    048A
0462:  BTFSC  31.3
0464:  BRA    046A
0466:  MOVLW  20
0468:  BRA    0480
046A:  BTFSS  31.7
046C:  BRA    047A
046E:  MOVLW  2D
0470:  MOVWF  00
0472:  MOVF   FED,W
0474:  BCF    31.6
0476:  BCF    31.7
0478:  BRA    0482
047A:  BSF    31.3
047C:  BCF    31.4
047E:  MOVLW  30
0480:  ADDWF  00,F
0482:  MOVF   00,W
0484:  BTFSS  F9E.4
0486:  BRA    0484
0488:  MOVWF  FAD
048A:  MOVF   FEE,W
048C:  BTFSS  31.6
048E:  BRA    044C
0490:  GOTO   067E (RETURN)
0494:  MOVF   31,W
0496:  CLRF   01
0498:  SUBWF  30,W
049A:  BC    04A2
049C:  MOVFF  30,00
04A0:  BRA    04BA
04A2:  CLRF   00
04A4:  MOVLW  08
04A6:  MOVWF  32
04A8:  RLCF   30,F
04AA:  RLCF   00,F
04AC:  MOVF   31,W
04AE:  SUBWF  00,W
04B0:  BTFSC  FD8.0
04B2:  MOVWF  00
04B4:  RLCF   01,F
04B6:  DECFSZ 32,F
04B8:  BRA    04A8
04BA:  RETURN 0
04BC:  MOVLW  20
04BE:  BTFSS  2B.4
04C0:  MOVLW  30
04C2:  MOVWF  2C
04C4:  MOVFF  2A,00
04C8:  BTFSS  2A.7
04CA:  BRA    04DC
04CC:  COMF   00,F
04CE:  INCF   00,F
04D0:  MOVFF  00,2A
04D4:  MOVLW  2D
04D6:  MOVWF  2C
04D8:  BSF    2B.7
04DA:  BSF    2B.0
04DC:  MOVF   01,W
04DE:  MOVFF  2A,30
04E2:  MOVLW  64
04E4:  MOVWF  31
04E6:  RCALL  0494
04E8:  MOVFF  00,2A
04EC:  MOVLW  30
04EE:  ADDWF  01,W
04F0:  MOVWF  2D
04F2:  MOVFF  2A,30
04F6:  MOVLW  0A
04F8:  MOVWF  31
04FA:  RCALL  0494
04FC:  MOVLW  30
04FE:  ADDWF  00,W
0500:  MOVWF  2F
0502:  MOVLW  30
0504:  ADDWF  01,W
0506:  MOVWF  2E
0508:  MOVFF  2C,00
050C:  MOVLW  30
050E:  SUBWF  2D,W
0510:  BZ    051A
0512:  BSF    2B.1
0514:  BTFSC  2B.7
0516:  BSF    2B.2
0518:  BRA    053E
051A:  MOVFF  2C,2D
051E:  MOVLW  20
0520:  MOVWF  2C
0522:  MOVLW  30
0524:  SUBWF  2E,W
0526:  BZ    0530
0528:  BSF    2B.0
052A:  BTFSC  2B.7
052C:  BSF    2B.1
052E:  BRA    053E
0530:  BTFSS  FD8.2
0532:  BSF    2B.0
0534:  BNZ   053E
0536:  MOVFF  2D,2E
053A:  MOVLW  20
053C:  MOVWF  2D
053E:  BTFSC  2B.2
0540:  BRA    054C
0542:  BTFSC  2B.1
0544:  BRA    0552
0546:  BTFSC  2B.0
0548:  BRA    0558
054A:  BRA    055E
054C:  MOVFF  2C,30
0550:  RCALL  0286
0552:  MOVFF  2D,30
0556:  RCALL  0286
0558:  MOVFF  2E,30
055C:  RCALL  0286
055E:  MOVFF  2F,30
0562:  RCALL  0286
0564:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20MHz) 
*
0114:  CLRF   FEA
0116:  MOVLW  31
0118:  MOVWF  FE9
011A:  MOVF   FEF,W
011C:  BZ    0138
011E:  MOVLW  06
0120:  MOVWF  01
0122:  CLRF   00
0124:  DECFSZ 00,F
0126:  BRA    0124
0128:  DECFSZ 01,F
012A:  BRA    0122
012C:  MOVLW  7B
012E:  MOVWF  00
0130:  DECFSZ 00,F
0132:  BRA    0130
0134:  DECFSZ FEF,F
0136:  BRA    011E
0138:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=0,rcv=0,bits=8,stream=PORT1) 
....................  
.................... #define LED PIN_None 
.................... #define DELAY 1000 
....................  
....................  
....................  
.................... #include "LCD420.c" 
.................... /////////////////////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                                                  //// 
.................... ////            Driver for common 4x20 LCD modules  (Fonction de haut niveau )             //// 
.................... ////                                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.                               //// 
.................... ////                                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.                         //// 
.................... ////                     The following have special meaning:                               //// 
.................... ////                      \f  Clear display                                                //// 
.................... ////                      \n  Go to start of second line                                   //// 
.................... ////                      \b  Move back one position                                       //// 
.................... ////                                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1 -> 20,4)                //// 
.................... ////                                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD                             //// 
.................... ////                                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services                               //// 
.................... //// This source code may only be used by licensed users of the CCS C                      //// 
.................... //// compiler.  This source code may only be distributed to other                          //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction                     //// 
.................... //// or distribution is permitted without written permission.                              //// 
.................... //// Derivative programs created using this software in object code                        //// 
.................... //// form are not restricted in any way.                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed ( Mettre dans l'ordre de poid faible ? fort ) 
....................            int     data : 4;         // be pin B0. 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................  
....................         } lcd; 
....................  
.................... #byte lcd = 0xF83                        // This puts the entire structure ( se trouve ? la page 47 du datasheet dans "SPECIAL FUNCTION REGISTER MAP" ) 
....................                                          // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {15,0,0,0,0}; // For read mode data pins are in  ( 15 car les 4 bits du lcd doivent etre ? l'?tat haut et du cot? gauche car d?plac? en premiere ligne dans struct ) 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() {  // Fonction de bas niveau 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
015C:  MOVLW  0F
015E:  MOVWF  F95
....................       lcd.rw = 1; 
0160:  BSF    F83.5
....................       delay_cycles(1); 
0162:  NOP   
....................       lcd.enable = 1; 
0164:  BSF    F83.6
....................       delay_cycles(1); 
0166:  NOP   
....................       high = lcd.data; 
0168:  MOVF   F83,W
016A:  ANDLW  0F
016C:  MOVWF  37
....................       lcd.enable = 0; 
016E:  BCF    F83.6
....................       delay_cycles(1); 
0170:  NOP   
....................       lcd.enable = 1; 
0172:  BSF    F83.6
....................       delay_us(1); 
0174:  BRA    0176
0176:  BRA    0178
0178:  NOP   
....................       low = lcd.data; 
017A:  MOVF   F83,W
017C:  ANDLW  0F
017E:  MOVWF  36
....................       lcd.enable = 0; 
0180:  BCF    F83.6
....................       set_tris_d(LCD_WRITE); 
0182:  MOVLW  00
0184:  MOVWF  F95
....................       return( (high<<4) | low); 
0186:  SWAPF  37,W
0188:  MOVWF  00
018A:  MOVLW  F0
018C:  ANDWF  00,F
018E:  MOVF   00,W
0190:  IORWF  36,W
0192:  MOVWF  01
0194:  GOTO   019C (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) {  // Fonction de bas niveau 
....................       lcd.data = n; 
*
013A:  MOVF   37,W
013C:  ANDLW  0F
013E:  MOVWF  00
0140:  MOVLW  F0
0142:  ANDWF  F83,W
0144:  IORWF  00,W
0146:  MOVWF  F83
....................       delay_cycles(1); 
0148:  NOP   
....................       lcd.enable = 1; 
014A:  BSF    F83.6
....................       delay_us(2); 
014C:  MOVLW  02
014E:  MOVWF  00
0150:  DECFSZ 00,F
0152:  BRA    0150
0154:  BRA    0156
0156:  NOP   
....................       lcd.enable = 0; 
0158:  BCF    F83.6
015A:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) {  // Fonction de bas niveau 
....................  
....................       lcd.rs = 0; 
*
0198:  BCF    F83.4
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
019A:  BRA    015C
019C:  MOVFF  01,36
01A0:  BTFSC  01.7
01A2:  BRA    019A
....................       lcd.rs = address; 
01A4:  BTFSS  34.0
01A6:  BCF    F83.4
01A8:  BTFSC  34.0
01AA:  BSF    F83.4
....................       delay_cycles(1); 
01AC:  NOP   
....................       lcd.rw = 0; 
01AE:  BCF    F83.5
....................       delay_cycles(1); 
01B0:  NOP   
....................       lcd.enable = 0; 
01B2:  BCF    F83.6
....................       lcd_send_nibble(n >> 4); 
01B4:  SWAPF  35,W
01B6:  MOVWF  36
01B8:  MOVLW  0F
01BA:  ANDWF  36,F
01BC:  MOVFF  36,37
01C0:  RCALL  013A
....................       lcd_send_nibble(n & 0xf); 
01C2:  MOVF   35,W
01C4:  ANDLW  0F
01C6:  MOVWF  36
01C8:  MOVWF  37
01CA:  RCALL  013A
01CC:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
01CE:  MOVLW  00
01D0:  MOVWF  F95
....................     lcd.rs = 0; 
01D2:  BCF    F83.4
....................     lcd.rw = 0; 
01D4:  BCF    F83.5
....................     lcd.enable = 0; 
01D6:  BCF    F83.6
....................     delay_ms(15); 
01D8:  MOVLW  0F
01DA:  MOVWF  31
01DC:  RCALL  0114
....................     for(i=1;i<=3;++i) { 
01DE:  MOVLW  01
01E0:  MOVWF  2A
01E2:  MOVF   2A,W
01E4:  SUBLW  03
01E6:  BNC   01F8
....................        lcd_send_nibble(3); 
01E8:  MOVLW  03
01EA:  MOVWF  37
01EC:  RCALL  013A
....................        delay_ms(5); 
01EE:  MOVLW  05
01F0:  MOVWF  31
01F2:  RCALL  0114
01F4:  INCF   2A,F
01F6:  BRA    01E2
....................     } 
....................     lcd_send_nibble(2); 
01F8:  MOVLW  02
01FA:  MOVWF  37
01FC:  RCALL  013A
....................     for(i=0;i<=3;++i) 
01FE:  CLRF   2A
0200:  MOVF   2A,W
0202:  SUBLW  03
0204:  BNC   0222
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0206:  CLRF   03
0208:  MOVF   2A,W
020A:  MOVFF  FF2,2B
020E:  BCF    FF2.7
0210:  RCALL  0096
0212:  BTFSC  2B.7
0214:  BSF    FF2.7
0216:  MOVWF  2B
0218:  CLRF   34
021A:  MOVWF  35
021C:  RCALL  0198
021E:  INCF   2A,F
0220:  BRA    0200
0222:  GOTO   063C (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0226:  MOVLW  01
0228:  SUBWF  32,W
022A:  ADDLW  FC
022C:  BC    024A
022E:  ADDLW  04
0230:  GOTO   025A
....................      case 1 : address=0x80;break; 
0234:  MOVLW  80
0236:  MOVWF  33
0238:  BRA    024A
....................      case 2 : address=0xc0;break; 
023A:  MOVLW  C0
023C:  MOVWF  33
023E:  BRA    024A
....................      case 3 : address=0x94;break; 
0240:  MOVLW  94
0242:  MOVWF  33
0244:  BRA    024A
....................      case 4 : address=0xd4;break; 
0246:  MOVLW  D4
0248:  MOVWF  33
....................    } 
....................    address+=x-1; 
024A:  MOVLW  01
024C:  SUBWF  31,W
024E:  ADDWF  33,F
....................    lcd_send_byte(0,address); 
0250:  CLRF   34
0252:  MOVFF  33,35
0256:  RCALL  0198
0258:  RETURN 0
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0286:  MOVF   30,W
0288:  XORLW  0C
028A:  BZ    0296
028C:  XORLW  06
028E:  BZ    02AA
0290:  XORLW  02
0292:  BZ    02B8
0294:  BRA    02C2
....................      case '\f'   : lcd_send_byte(0,1); 
0296:  CLRF   34
0298:  MOVLW  01
029A:  MOVWF  35
029C:  RCALL  0198
....................                    lcdline=1; 
029E:  MOVLW  01
02A0:  MOVWF  16
....................                    delay_ms(2); 
02A2:  MOVLW  02
02A4:  MOVWF  31
02A6:  RCALL  0114
....................                                            break; 
02A8:  BRA    02CC
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
02AA:  INCF   16,F
02AC:  MOVLW  01
02AE:  MOVWF  31
02B0:  MOVFF  16,32
02B4:  RCALL  0226
02B6:  BRA    02CC
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02B8:  CLRF   34
02BA:  MOVLW  10
02BC:  MOVWF  35
02BE:  RCALL  0198
02C0:  BRA    02CC
....................      default     : lcd_send_byte(1,c);     break; 
02C2:  MOVLW  01
02C4:  MOVWF  34
02C6:  MOVFF  30,35
02CA:  RCALL  0198
....................    } 
02CC:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #use fast_io(C) 
....................  
.................... #use rs232(baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... #define trigger pin_C0 
.................... #define echo pin_C1 
.................... #define dot pin_E2 
.................... #define RX pin_C7 
.................... #define TX pin_C6 
.................... #define GREEN pin_E0 
.................... #define RED pin_E1 
....................  
.................... #int_TIMER1 
....................  
.................... int16 time, distance, x, i, minVal; 
.................... boolean flag=0; 
.................... char buffer[4]; 
.................... int j=0; 
.................... int8 c,d,u; 
....................  
.................... #int_RDA 
.................... void RDA_isr(void) { 
....................   buffer[j]=getc(); 
*
00B4:  CLRF   03
00B6:  MOVF   26,W
00B8:  ADDLW  22
00BA:  MOVWF  FE9
00BC:  MOVLW  00
00BE:  ADDWFC 03,W
00C0:  MOVWF  FEA
00C2:  BTFSS  F9E.5
00C4:  BRA    00C2
00C6:  MOVFF  FAE,FEF
....................   if(buffer[0]=='!' && flag==0) { 
00CA:  MOVF   22,W
00CC:  SUBLW  21
00CE:  BNZ   00E0
00D0:  BTFSC  21.0
00D2:  BRA    00E0
....................     j++; 
00D4:  INCF   26,F
....................     if(j>=4) { 
00D6:  MOVF   26,W
00D8:  SUBLW  03
00DA:  BC    00E0
....................       j=0; 
00DC:  CLRF   26
....................       flag=1; 
00DE:  BSF    21.0
....................     } 
....................   } 
00E0:  BCF    F9E.5
00E2:  GOTO   0054
.................... } 
....................  
.................... /* 
.................... * transofmation de la valeur en valeur base 16 
.................... */ 
.................... int16 outputValueParser(int16 value){ 
*
0566:  CLRF   2C
....................    int output = 0; 
....................    if (value < 10) { output = value;} 
0568:  MOVF   2B,F
056A:  BNZ   0578
056C:  MOVF   2A,W
056E:  SUBLW  09
0570:  BNC   0578
0572:  MOVFF  2A,2C
0576:  BRA    05D6
....................    else { 
....................     x = value; 
0578:  MOVFF  2B,1C
057C:  MOVFF  2A,1B
....................     x = x % 10; 
0580:  MOVFF  1C,2E
0584:  MOVFF  1B,2D
0588:  CLRF   30
058A:  MOVLW  0A
058C:  MOVWF  2F
058E:  RCALL  0356
0590:  MOVFF  00,1B
0594:  MOVFF  03,1C
....................     i = value; 
0598:  MOVFF  2B,1E
059C:  MOVFF  2A,1D
....................     i = i/10; 
05A0:  MOVFF  1E,2E
05A4:  MOVFF  1D,2D
05A8:  CLRF   30
05AA:  MOVLW  0A
05AC:  MOVWF  2F
05AE:  RCALL  0356
05B0:  MOVFF  02,1E
05B4:  MOVFF  01,1D
....................  
....................     output = x + i*16; 
05B8:  RLCF   1D,W
05BA:  MOVWF  02
05BC:  RLCF   1E,W
05BE:  MOVWF  03
05C0:  RLCF   02,F
05C2:  RLCF   03,F
05C4:  RLCF   02,F
05C6:  RLCF   03,F
05C8:  RLCF   02,F
05CA:  RLCF   03,F
05CC:  MOVLW  F0
05CE:  ANDWF  02,F
05D0:  MOVF   02,W
05D2:  ADDWF  1B,W
05D4:  MOVWF  2C
....................    } 
....................    return output; 
05D6:  CLRF   03
05D8:  MOVFF  2C,01
05DC:  MOVFF  03,02
05E0:  GOTO   07A8 (RETURN)
.................... } 
....................  
.................... /* 
.................... * parsing temps => distance 
.................... */ 
.................... int16 parseDist(int16 time){ 
....................   return time / (286) ; // theoriquement 343 m/s 
*
0398:  MOVFF  2B,2E
039C:  MOVFF  2A,2D
03A0:  MOVLW  01
03A2:  MOVWF  30
03A4:  MOVLW  1E
03A6:  MOVWF  2F
03A8:  RCALL  0356
03AA:  MOVFF  02,03
03AE:  MOVFF  02,02
03B2:  GOTO   0668 (RETURN)
....................   //return time/100; 
.................... } 
....................  
.................... /* 
.................... * trigger de la sonde 
.................... */ 
.................... void triggerSonde(){ 
....................    output_high(trigger); 
*
0344:  BSF    F8B.0
....................    delay_us(10); 
0346:  MOVLW  10
0348:  MOVWF  00
034A:  DECFSZ 00,F
034C:  BRA    034A
034E:  NOP   
....................    output_low(trigger); 
0350:  BCF    F8B.0
0352:  GOTO   064A (RETURN)
.................... } 
....................  
.................... /* 
.................... * Fonctione d'initalisation du LCD 
.................... */ 
.................... void init_lcd(){ 
....................    delay_ms(500); 
*
02EE:  MOVLW  02
02F0:  MOVWF  2A
02F2:  MOVLW  FA
02F4:  MOVWF  31
02F6:  RCALL  0114
02F8:  DECFSZ 2A,F
02FA:  BRA    02F2
....................    lcd_putc('\f'); 
02FC:  MOVLW  0C
02FE:  MOVWF  30
0300:  RCALL  0286
....................    lcd_gotoxy(1,1); 
0302:  MOVLW  01
0304:  MOVWF  31
0306:  MOVWF  32
0308:  RCALL  0226
....................    printf(lcd_putc,"Projet Electronique 2020 "); 
030A:  MOVLW  E6
030C:  MOVWF  FF6
030E:  MOVLW  00
0310:  MOVWF  FF7
0312:  RCALL  02CE
....................    delay_ms(1000); 
0314:  MOVLW  04
0316:  MOVWF  2A
0318:  MOVLW  FA
031A:  MOVWF  31
031C:  RCALL  0114
031E:  DECFSZ 2A,F
0320:  BRA    0318
....................    printf(lcd_putc,"Groupe 2"); 
0322:  MOVLW  00
0324:  MOVWF  FF6
0326:  MOVLW  01
0328:  MOVWF  FF7
032A:  RCALL  02CE
....................    delay_ms(1000); 
032C:  MOVLW  04
032E:  MOVWF  2A
0330:  MOVLW  FA
0332:  MOVWF  31
0334:  RCALL  0114
0336:  DECFSZ 2A,F
0338:  BRA    0330
....................    lcd_putc('\f'); 
033A:  MOVLW  0C
033C:  MOVWF  30
033E:  RCALL  0286
0340:  GOTO   063E (RETURN)
.................... } 
....................  
....................  
.................... /* 
.................... * fonction principale 
.................... */ 
.................... void main() 
*
05E4:  CLRF   FF8
05E6:  BCF    FD0.7
05E8:  BSF    07.7
05EA:  BSF    00.0
05EC:  MOVLW  81
05EE:  MOVWF  FAF
05F0:  MOVLW  A6
05F2:  MOVWF  FAC
05F4:  MOVLW  90
05F6:  MOVWF  FAB
05F8:  BCF    21.0
05FA:  CLRF   26
05FC:  BSF    FC1.0
05FE:  BSF    FC1.1
0600:  BSF    FC1.2
0602:  BCF    FC1.3
0604:  MOVLW  07
0606:  MOVWF  FB4
.................... { 
....................    setup_low_volt_detect(FALSE); 
0608:  CLRF   FD2
....................    set_tris_c(0b01000010); // set RC1 as input (ECHO) 
060A:  MOVLW  42
060C:  MOVWF  F94
....................  
....................    setup_spi(FALSE); 
060E:  CLRF   FC6
....................    setup_wdt(WDT_OFF); 
0610:  BCF    FD1.0
....................    setup_timer_1( T1_INTERNAL | T1_DIV_BY_1  ); 
0612:  MOVLW  85
0614:  MOVWF  FCD
....................    setup_comparator(NC_NC_NC_NC); 
0616:  MOVLW  07
0618:  MOVWF  FB4
061A:  MOVF   F95,W
061C:  MOVWF  F95
061E:  MOVF   F96,W
0620:  MOVWF  F96
0622:  MOVLW  10
0624:  MOVWF  00
0626:  DECFSZ 00,F
0628:  BRA    0626
062A:  NOP   
062C:  MOVF   FB4,W
062E:  BCF    FA1.6
....................    setup_vref(FALSE); 
0630:  CLRF   FB5
....................  
....................    enable_interrupts(INT_RDA); 
0632:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
0634:  MOVLW  C0
0636:  IORWF  FF2,F
....................    setup_oscillator(False); 
0638:  CLRF   FD3
....................  
....................    lcd_init(); 
063A:  BRA    01CE
....................    init_lcd(); 
063C:  BRA    02EE
....................  
....................    while(true) 
....................    { 
....................  
....................    // setup des valeurs 
....................    time = 0; 
063E:  CLRF   18
0640:  CLRF   17
....................  
....................    // recuperation minValue envoye par JAVA 
....................    minVal = 100;// (int16) getc(); 
0642:  CLRF   20
0644:  MOVLW  64
0646:  MOVWF  1F
....................  
....................    // d�clanchement de la sonde 
....................    triggerSonde(); 
0648:  BRA    0344
....................  
....................    // recuperation valeur temps de la sonde 
....................    while(input(echo) == 0){} // attente debut 
064A:  BTFSS  F82.1
064C:  BRA    064A
....................    set_timer1(0); 
064E:  CLRF   FCF
0650:  CLRF   FCE
....................    while(input(echo) == 1){} // attente fin ou overflow 
0652:  BTFSC  F82.1
0654:  BRA    0652
....................    time = get_timer1(); 
0656:  MOVF   FCE,W
0658:  MOVWF  17
065A:  MOVFF  FCF,18
....................  
....................    // temps => distance 
....................    distance = parseDist(time); 
065E:  MOVFF  18,2B
0662:  MOVFF  17,2A
0666:  BRA    0398
0668:  MOVFF  02,1A
066C:  MOVFF  01,19
....................     
....................    // envoie distance � java 
....................    printf("%ld", distance); 
0670:  MOVLW  10
0672:  MOVWF  FE9
0674:  MOVFF  1A,2B
0678:  MOVFF  19,2A
067C:  BRA    03B6
....................    printf("\n"); 
067E:  MOVLW  0A
0680:  BTFSS  F9E.4
0682:  BRA    0680
0684:  MOVWF  FAD
....................  
....................    if(flag==1){ 
0686:  BTFSS  21.0
0688:  BRA    06B4
....................      flag=0; 
068A:  BCF    21.0
....................      c=buffer[1]-48; 
068C:  MOVLW  30
068E:  SUBWF  23,W
0690:  MOVWF  27
....................      d=buffer[2]-48; 
0692:  MOVLW  30
0694:  SUBWF  24,W
0696:  MOVWF  28
....................      u=buffer[3]-48; 
0698:  MOVLW  30
069A:  SUBWF  25,W
069C:  MOVWF  29
....................      minVal=(int16) (c*100+d*10+u); 
069E:  MOVF   27,W
06A0:  MULLW  64
06A2:  MOVFF  FF3,2A
06A6:  MOVF   28,W
06A8:  MULLW  0A
06AA:  MOVF   FF3,W
06AC:  ADDWF  2A,W
06AE:  ADDWF  29,W
06B0:  CLRF   20
06B2:  MOVWF  1F
....................    } 
....................  
....................    c=distance/100; 
06B4:  MOVFF  1A,2E
06B8:  MOVFF  19,2D
06BC:  CLRF   30
06BE:  MOVLW  64
06C0:  MOVWF  2F
06C2:  RCALL  0356
06C4:  MOVFF  01,27
....................    d=(distance-(c*100))/10; 
06C8:  MOVF   27,W
06CA:  MULLW  64
06CC:  MOVF   FF3,W
06CE:  SUBWF  19,W
06D0:  MOVWF  2A
06D2:  MOVLW  00
06D4:  SUBWFB 1A,W
06D6:  MOVWF  2B
06D8:  MOVWF  2E
06DA:  MOVFF  2A,2D
06DE:  CLRF   30
06E0:  MOVLW  0A
06E2:  MOVWF  2F
06E4:  RCALL  0356
06E6:  MOVFF  01,28
....................    u=(distance-(c*100))-(d*10); 
06EA:  MOVF   27,W
06EC:  MULLW  64
06EE:  MOVF   FF3,W
06F0:  SUBWF  19,W
06F2:  MOVWF  2A
06F4:  MOVLW  00
06F6:  SUBWFB 1A,W
06F8:  MOVF   28,W
06FA:  MULLW  0A
06FC:  MOVF   FF3,W
06FE:  SUBWF  2A,W
0700:  MOVWF  29
....................  
....................    lcd_gotoxy(1,1); 
0702:  MOVLW  01
0704:  MOVWF  31
0706:  MOVWF  32
0708:  RCALL  0226
....................    printf(lcd_putc, "limite: "); 
070A:  MOVLW  0A
070C:  MOVWF  FF6
070E:  MOVLW  01
0710:  MOVWF  FF7
0712:  RCALL  02CE
....................    printf(lcd_putc, "%d", c); 
0714:  MOVFF  27,2A
0718:  MOVLW  18
071A:  MOVWF  2B
071C:  RCALL  04BC
....................    printf(lcd_putc, "%d", d); 
071E:  MOVFF  28,2A
0722:  MOVLW  18
0724:  MOVWF  2B
0726:  RCALL  04BC
....................    printf(lcd_putc, "%d", u); 
0728:  MOVFF  29,2A
072C:  MOVLW  18
072E:  MOVWF  2B
0730:  RCALL  04BC
....................  
....................    // v�rification borne minVal 
....................    if (distance < minVal){ 
0732:  MOVF   1A,W
0734:  SUBWF  20,W
0736:  BNC   075A
0738:  BNZ   0740
073A:  MOVF   1F,W
073C:  SUBWF  19,W
073E:  BC    075A
....................       // allumer red => trop proche 
....................       printf("1\n"); 
0740:  MOVLW  31
0742:  BTFSS  F9E.4
0744:  BRA    0742
0746:  MOVWF  FAD
0748:  MOVLW  0A
074A:  BTFSS  F9E.4
074C:  BRA    074A
074E:  MOVWF  FAD
....................       output_high(RED); 
0750:  BCF    F96.1
0752:  BSF    F8D.1
....................       output_low(GREEN); 
0754:  BCF    F96.0
0756:  BCF    F8D.0
....................    } 
0758:  BRA    0772
....................    else { 
....................       // allumer green => OK 
....................       printf("2\n"); 
075A:  MOVLW  32
075C:  BTFSS  F9E.4
075E:  BRA    075C
0760:  MOVWF  FAD
0762:  MOVLW  0A
0764:  BTFSS  F9E.4
0766:  BRA    0764
0768:  MOVWF  FAD
....................       output_high(GREEN); 
076A:  BCF    F96.0
076C:  BSF    F8D.0
....................       output_low(RED); 
076E:  BCF    F96.1
0770:  BCF    F8D.1
....................    } 
....................  
....................    // gestion du point si > que 100 !> cm -> m 
....................    if(distance > 99){ 
0772:  MOVF   1A,F
0774:  BNZ   077C
0776:  MOVF   19,W
0778:  SUBLW  63
077A:  BC    079A
....................       distance = distance / 10; 
077C:  MOVFF  1A,2E
0780:  MOVFF  19,2D
0784:  CLRF   30
0786:  MOVLW  0A
0788:  MOVWF  2F
078A:  RCALL  0356
078C:  MOVFF  02,1A
0790:  MOVFF  01,19
....................       output_high(dot); 
0794:  BCF    F96.2
0796:  BSF    F8D.2
....................    } 
0798:  BRA    079E
....................    else { 
....................       output_low(dot); 
079A:  BCF    F96.2
079C:  BCF    F8D.2
....................    } 
....................  
....................    // affichage sur 7seg de la distance 
....................    output_b(outputValueParser(distance)); 
079E:  MOVFF  1A,2B
07A2:  MOVFF  19,2A
07A6:  BRA    0566
07A8:  CLRF   F93
07AA:  MOVFF  01,F8A
....................  
....................  
....................    // attente pour eviter spam 
....................    delay_ms(500); 
07AE:  MOVLW  02
07B0:  MOVWF  2A
07B2:  MOVLW  FA
07B4:  MOVWF  31
07B6:  RCALL  0114
07B8:  DECFSZ 2A,F
07BA:  BRA    07B2
07BC:  BRA    063E
....................    } 
....................  
.................... } 
07BE:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV25 NOWDT WDT128
   Word  3: 0000  
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
