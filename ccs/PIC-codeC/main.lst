CCS PCH C Compiler, Version 5.008, 5967               06-mai-20 17:54

               Filename:   W:\Ephec\ElecDigitalProjet\ccs\PIC-codeC\main.lst

               ROM used:   2142 bytes (7%)
                           Largest free fragment is 30622
               RAM used:   45 (3%) at main() level
                           62 (4%) worst case
               Stack used: 8 locations (6 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   05FA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   00CC
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F458.h> 
.................... //////// Standard Header file for the PIC18F458 device //////////////// 
.................... #device PIC18F458 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA 28,0C
00B2:  DATA 01,06
*
010C:  DATA 20,50
010E:  DATA 72,6F
0110:  DATA 6A,65
0112:  DATA 74,20
0114:  DATA 45,6C
0116:  DATA 65,63
0118:  DATA 74,72
011A:  DATA 6F,6E
011C:  DATA 69,71
011E:  DATA 75,65
0120:  DATA 20,00
0122:  DATA 20,32
0124:  DATA 30,32
0126:  DATA 30,20
0128:  DATA 47,72
012A:  DATA 6F,75
012C:  DATA 70,65
012E:  DATA 20,33
0130:  DATA 20,00
0132:  DATA 20,4D
0134:  DATA 69,6E
0136:  DATA 56,61
0138:  DATA 6C,3A
013A:  DATA 20,00
013C:  DATA 20,44
013E:  DATA 69,73
0140:  DATA 74,61
0142:  DATA 6E,63
0144:  DATA 65,3A
0146:  DATA 20,00
*
028E:  MOVFF  FF2,0D
0292:  BCF    FF2.7
0294:  ADDWF  FE8,W
0296:  CLRF   FF7
0298:  RLCF   FF7,F
029A:  ADDLW  B3
029C:  MOVWF  FF6
029E:  MOVLW  02
02A0:  ADDWFC FF7,F
02A2:  TBLRD*-
02A4:  MOVF   FF5,W
02A6:  MOVWF  FFA
02A8:  TBLRD*
02AA:  MOVF   FF5,W
02AC:  BTFSC  0D.7
02AE:  BSF    FF2.7
02B0:  MOVWF  FF9
02B2:  DATA 68,02
02B4:  DATA 6E,02
02B6:  DATA 74,02
02B8:  DATA 7A,02
*
0302:  TBLRD*+
0304:  MOVF   FF5,F
0306:  BZ    0320
0308:  MOVFF  FF6,2B
030C:  MOVFF  FF7,2C
0310:  MOVFF  FF5,31
0314:  RCALL  02BA
0316:  MOVFF  2B,FF6
031A:  MOVFF  2C,FF7
031E:  BRA    0302
0320:  RETURN 0
*
038A:  CLRF   01
038C:  CLRF   02
038E:  CLRF   00
0390:  CLRF   03
0392:  MOVF   31,W
0394:  BNZ   039A
0396:  MOVF   30,W
0398:  BZ    03CA
039A:  MOVLW  10
039C:  MOVWF  32
039E:  BCF    FD8.0
03A0:  RLCF   2E,F
03A2:  RLCF   2F,F
03A4:  RLCF   00,F
03A6:  RLCF   03,F
03A8:  MOVF   31,W
03AA:  SUBWF  03,W
03AC:  BNZ   03B2
03AE:  MOVF   30,W
03B0:  SUBWF  00,W
03B2:  BNC   03C2
03B4:  MOVF   30,W
03B6:  SUBWF  00,F
03B8:  BTFSS  FD8.0
03BA:  DECF   03,F
03BC:  MOVF   31,W
03BE:  SUBWF  03,F
03C0:  BSF    FD8.0
03C2:  RLCF   01,F
03C4:  RLCF   02,F
03C6:  DECFSZ 32,F
03C8:  BRA    039E
03CA:  RETURN 0
03CC:  MOVFF  FEA,33
03D0:  MOVFF  FE9,32
03D4:  BTFSS  2C.7
03D6:  BRA    03E8
03D8:  BSF    32.7
03DA:  BTFSS  32.4
03DC:  INCF   32,F
03DE:  COMF   2B,F
03E0:  COMF   2C,F
03E2:  INCF   2B,F
03E4:  BTFSC  FD8.2
03E6:  INCF   2C,F
03E8:  SWAPF  2C,W
03EA:  IORLW  F0
03EC:  MOVWF  2E
03EE:  ADDWF  2E,F
03F0:  ADDLW  E2
03F2:  MOVWF  2F
03F4:  ADDLW  32
03F6:  MOVWF  31
03F8:  MOVF   2C,W
03FA:  ANDLW  0F
03FC:  ADDWF  2F,F
03FE:  ADDWF  2F,F
0400:  ADDWF  31,F
0402:  ADDLW  E9
0404:  MOVWF  30
0406:  ADDWF  30,F
0408:  ADDWF  30,F
040A:  SWAPF  2B,W
040C:  ANDLW  0F
040E:  ADDWF  30,F
0410:  ADDWF  31,F
0412:  RLCF   30,F
0414:  RLCF   31,F
0416:  COMF   31,F
0418:  RLCF   31,F
041A:  MOVF   2B,W
041C:  ANDLW  0F
041E:  ADDWF  31,F
0420:  RLCF   2E,F
0422:  MOVLW  07
0424:  MOVWF  2D
0426:  MOVLW  0A
0428:  DECF   30,F
042A:  ADDWF  31,F
042C:  BNC   0428
042E:  DECF   2F,F
0430:  ADDWF  30,F
0432:  BNC   042E
0434:  DECF   2E,F
0436:  ADDWF  2F,F
0438:  BNC   0434
043A:  DECF   2D,F
043C:  ADDWF  2E,F
043E:  BNC   043A
0440:  CLRF   FEA
0442:  MOVLW  2D
0444:  MOVWF  FE9
0446:  MOVLW  07
0448:  ANDWF  32,W
044A:  BCF    32.6
044C:  DECF   FE9,F
044E:  ANDWF  32,W
0450:  BNZ   0460
0452:  BTFSC  32.4
0454:  INCF   FE9,F
0456:  BTFSC  32.4
0458:  BRA    0460
045A:  MOVLW  20
045C:  MOVWF  00
045E:  BRA    0498
0460:  ADDWF  FE9,F
0462:  MOVLW  31
0464:  SUBWF  FE9,W
0466:  BTFSC  FD8.2
0468:  BSF    32.6
046A:  MOVF   FEF,W
046C:  MOVWF  00
046E:  BNZ   0480
0470:  BTFSC  32.6
0472:  BRA    0480
0474:  BTFSC  32.4
0476:  BRA    04A0
0478:  BTFSC  32.3
047A:  BRA    0480
047C:  MOVLW  20
047E:  BRA    0496
0480:  BTFSS  32.7
0482:  BRA    0490
0484:  MOVLW  2D
0486:  MOVWF  00
0488:  MOVF   FED,W
048A:  BCF    32.6
048C:  BCF    32.7
048E:  BRA    0498
0490:  BSF    32.3
0492:  BCF    32.4
0494:  MOVLW  30
0496:  ADDWF  00,F
0498:  MOVF   00,W
049A:  BTFSS  F9E.4
049C:  BRA    049A
049E:  MOVWF  FAD
04A0:  MOVF   FEE,W
04A2:  BTFSS  32.6
04A4:  BRA    0462
04A6:  GOTO   06A0 (RETURN)
04AA:  MOVF   32,W
04AC:  CLRF   01
04AE:  SUBWF  31,W
04B0:  BC    04B8
04B2:  MOVFF  31,00
04B6:  BRA    04D0
04B8:  CLRF   00
04BA:  MOVLW  08
04BC:  MOVWF  33
04BE:  RLCF   31,F
04C0:  RLCF   00,F
04C2:  MOVF   32,W
04C4:  SUBWF  00,W
04C6:  BTFSC  FD8.0
04C8:  MOVWF  00
04CA:  RLCF   01,F
04CC:  DECFSZ 33,F
04CE:  BRA    04BE
04D0:  RETURN 0
04D2:  MOVLW  20
04D4:  BTFSS  2C.4
04D6:  MOVLW  30
04D8:  MOVWF  2D
04DA:  MOVFF  2B,00
04DE:  BTFSS  2B.7
04E0:  BRA    04F2
04E2:  COMF   00,F
04E4:  INCF   00,F
04E6:  MOVFF  00,2B
04EA:  MOVLW  2D
04EC:  MOVWF  2D
04EE:  BSF    2C.7
04F0:  BSF    2C.0
04F2:  MOVF   01,W
04F4:  MOVFF  2B,31
04F8:  MOVLW  64
04FA:  MOVWF  32
04FC:  RCALL  04AA
04FE:  MOVFF  00,2B
0502:  MOVLW  30
0504:  ADDWF  01,W
0506:  MOVWF  2E
0508:  MOVFF  2B,31
050C:  MOVLW  0A
050E:  MOVWF  32
0510:  RCALL  04AA
0512:  MOVLW  30
0514:  ADDWF  00,W
0516:  MOVWF  30
0518:  MOVLW  30
051A:  ADDWF  01,W
051C:  MOVWF  2F
051E:  MOVFF  2D,00
0522:  MOVLW  30
0524:  SUBWF  2E,W
0526:  BZ    0530
0528:  BSF    2C.1
052A:  BTFSC  2C.7
052C:  BSF    2C.2
052E:  BRA    0554
0530:  MOVFF  2D,2E
0534:  MOVLW  20
0536:  MOVWF  2D
0538:  MOVLW  30
053A:  SUBWF  2F,W
053C:  BZ    0546
053E:  BSF    2C.0
0540:  BTFSC  2C.7
0542:  BSF    2C.1
0544:  BRA    0554
0546:  BTFSS  FD8.2
0548:  BSF    2C.0
054A:  BNZ   0554
054C:  MOVFF  2E,2F
0550:  MOVLW  20
0552:  MOVWF  2E
0554:  BTFSC  2C.2
0556:  BRA    0562
0558:  BTFSC  2C.1
055A:  BRA    0568
055C:  BTFSC  2C.0
055E:  BRA    056E
0560:  BRA    0574
0562:  MOVFF  2D,31
0566:  RCALL  02BA
0568:  MOVFF  2E,31
056C:  RCALL  02BA
056E:  MOVFF  2F,31
0572:  RCALL  02BA
0574:  MOVFF  30,31
0578:  RCALL  02BA
057A:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20MHz) 
*
0148:  CLRF   FEA
014A:  MOVLW  32
014C:  MOVWF  FE9
014E:  MOVF   FEF,W
0150:  BZ    016C
0152:  MOVLW  06
0154:  MOVWF  01
0156:  CLRF   00
0158:  DECFSZ 00,F
015A:  BRA    0158
015C:  DECFSZ 01,F
015E:  BRA    0156
0160:  MOVLW  7B
0162:  MOVWF  00
0164:  DECFSZ 00,F
0166:  BRA    0164
0168:  DECFSZ FEF,F
016A:  BRA    0152
016C:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=0,rcv=0,bits=8,stream=PORT1) 
....................  
.................... #define LED PIN_None 
.................... #define DELAY 1000 
....................  
....................  
....................  
.................... #include "LCD420.c" 
.................... /////////////////////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                                                  //// 
.................... ////            Driver for common 4x20 LCD modules  (Fonction de haut niveau )             //// 
.................... ////                                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.                               //// 
.................... ////                                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.                         //// 
.................... ////                     The following have special meaning:                               //// 
.................... ////                      \f  Clear display                                                //// 
.................... ////                      \n  Go to start of second line                                   //// 
.................... ////                      \b  Move back one position                                       //// 
.................... ////                                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1 -> 20,4)                //// 
.................... ////                                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD                             //// 
.................... ////                                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services                               //// 
.................... //// This source code may only be used by licensed users of the CCS C                      //// 
.................... //// compiler.  This source code may only be distributed to other                          //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction                     //// 
.................... //// or distribution is permitted without written permission.                              //// 
.................... //// Derivative programs created using this software in object code                        //// 
.................... //// form are not restricted in any way.                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed ( Mettre dans l'ordre de poid faible ? fort ) 
....................            int     data : 4;         // be pin B0. 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................  
....................         } lcd; 
....................  
.................... #byte lcd = 0xF83                        // This puts the entire structure ( se trouve ? la page 47 du datasheet dans "SPECIAL FUNCTION REGISTER MAP" ) 
....................                                          // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {15,0,0,0,0}; // For read mode data pins are in  ( 15 car les 4 bits du lcd doivent etre ? l'?tat haut et du cot? gauche car d?plac? en premiere ligne dans struct ) 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() {  // Fonction de bas niveau 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
0190:  MOVLW  0F
0192:  MOVWF  F95
....................       lcd.rw = 1; 
0194:  BSF    F83.5
....................       delay_cycles(1); 
0196:  NOP   
....................       lcd.enable = 1; 
0198:  BSF    F83.6
....................       delay_cycles(1); 
019A:  NOP   
....................       high = lcd.data; 
019C:  MOVF   F83,W
019E:  ANDLW  0F
01A0:  MOVWF  38
....................       lcd.enable = 0; 
01A2:  BCF    F83.6
....................       delay_cycles(1); 
01A4:  NOP   
....................       lcd.enable = 1; 
01A6:  BSF    F83.6
....................       delay_us(1); 
01A8:  BRA    01AA
01AA:  BRA    01AC
01AC:  NOP   
....................       low = lcd.data; 
01AE:  MOVF   F83,W
01B0:  ANDLW  0F
01B2:  MOVWF  37
....................       lcd.enable = 0; 
01B4:  BCF    F83.6
....................       set_tris_d(LCD_WRITE); 
01B6:  MOVLW  00
01B8:  MOVWF  F95
....................       return( (high<<4) | low); 
01BA:  SWAPF  38,W
01BC:  MOVWF  00
01BE:  MOVLW  F0
01C0:  ANDWF  00,F
01C2:  MOVF   00,W
01C4:  IORWF  37,W
01C6:  MOVWF  01
01C8:  GOTO   01D0 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) {  // Fonction de bas niveau 
....................       lcd.data = n; 
*
016E:  MOVF   38,W
0170:  ANDLW  0F
0172:  MOVWF  00
0174:  MOVLW  F0
0176:  ANDWF  F83,W
0178:  IORWF  00,W
017A:  MOVWF  F83
....................       delay_cycles(1); 
017C:  NOP   
....................       lcd.enable = 1; 
017E:  BSF    F83.6
....................       delay_us(2); 
0180:  MOVLW  02
0182:  MOVWF  00
0184:  DECFSZ 00,F
0186:  BRA    0184
0188:  BRA    018A
018A:  NOP   
....................       lcd.enable = 0; 
018C:  BCF    F83.6
018E:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) {  // Fonction de bas niveau 
....................  
....................       lcd.rs = 0; 
*
01CC:  BCF    F83.4
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
01CE:  BRA    0190
01D0:  MOVFF  01,37
01D4:  BTFSC  01.7
01D6:  BRA    01CE
....................       lcd.rs = address; 
01D8:  BTFSS  35.0
01DA:  BCF    F83.4
01DC:  BTFSC  35.0
01DE:  BSF    F83.4
....................       delay_cycles(1); 
01E0:  NOP   
....................       lcd.rw = 0; 
01E2:  BCF    F83.5
....................       delay_cycles(1); 
01E4:  NOP   
....................       lcd.enable = 0; 
01E6:  BCF    F83.6
....................       lcd_send_nibble(n >> 4); 
01E8:  SWAPF  36,W
01EA:  MOVWF  37
01EC:  MOVLW  0F
01EE:  ANDWF  37,F
01F0:  MOVFF  37,38
01F4:  RCALL  016E
....................       lcd_send_nibble(n & 0xf); 
01F6:  MOVF   36,W
01F8:  ANDLW  0F
01FA:  MOVWF  37
01FC:  MOVWF  38
01FE:  RCALL  016E
0200:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0202:  MOVLW  00
0204:  MOVWF  F95
....................     lcd.rs = 0; 
0206:  BCF    F83.4
....................     lcd.rw = 0; 
0208:  BCF    F83.5
....................     lcd.enable = 0; 
020A:  BCF    F83.6
....................     delay_ms(15); 
020C:  MOVLW  0F
020E:  MOVWF  32
0210:  RCALL  0148
....................     for(i=1;i<=3;++i) { 
0212:  MOVLW  01
0214:  MOVWF  2B
0216:  MOVF   2B,W
0218:  SUBLW  03
021A:  BNC   022C
....................        lcd_send_nibble(3); 
021C:  MOVLW  03
021E:  MOVWF  38
0220:  RCALL  016E
....................        delay_ms(5); 
0222:  MOVLW  05
0224:  MOVWF  32
0226:  RCALL  0148
0228:  INCF   2B,F
022A:  BRA    0216
....................     } 
....................     lcd_send_nibble(2); 
022C:  MOVLW  02
022E:  MOVWF  38
0230:  RCALL  016E
....................     for(i=0;i<=3;++i) 
0232:  CLRF   2B
0234:  MOVF   2B,W
0236:  SUBLW  03
0238:  BNC   0256
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
023A:  CLRF   03
023C:  MOVF   2B,W
023E:  MOVFF  FF2,2C
0242:  BCF    FF2.7
0244:  RCALL  0096
0246:  BTFSC  2C.7
0248:  BSF    FF2.7
024A:  MOVWF  2C
024C:  CLRF   35
024E:  MOVWF  36
0250:  RCALL  01CC
0252:  INCF   2B,F
0254:  BRA    0234
0256:  GOTO   0650 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
025A:  MOVLW  01
025C:  SUBWF  33,W
025E:  ADDLW  FC
0260:  BC    027E
0262:  ADDLW  04
0264:  GOTO   028E
....................      case 1 : address=0x80;break; 
0268:  MOVLW  80
026A:  MOVWF  34
026C:  BRA    027E
....................      case 2 : address=0xc0;break; 
026E:  MOVLW  C0
0270:  MOVWF  34
0272:  BRA    027E
....................      case 3 : address=0x94;break; 
0274:  MOVLW  94
0276:  MOVWF  34
0278:  BRA    027E
....................      case 4 : address=0xd4;break; 
027A:  MOVLW  D4
027C:  MOVWF  34
....................    } 
....................    address+=x-1; 
027E:  MOVLW  01
0280:  SUBWF  32,W
0282:  ADDWF  34,F
....................    lcd_send_byte(0,address); 
0284:  CLRF   35
0286:  MOVFF  34,36
028A:  RCALL  01CC
028C:  RETURN 0
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
02BA:  MOVF   31,W
02BC:  XORLW  0C
02BE:  BZ    02CA
02C0:  XORLW  06
02C2:  BZ    02DE
02C4:  XORLW  02
02C6:  BZ    02EC
02C8:  BRA    02F6
....................      case '\f'   : lcd_send_byte(0,1); 
02CA:  CLRF   35
02CC:  MOVLW  01
02CE:  MOVWF  36
02D0:  RCALL  01CC
....................                    lcdline=1; 
02D2:  MOVLW  01
02D4:  MOVWF  16
....................                    delay_ms(2); 
02D6:  MOVLW  02
02D8:  MOVWF  32
02DA:  RCALL  0148
....................                                            break; 
02DC:  BRA    0300
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
02DE:  INCF   16,F
02E0:  MOVLW  01
02E2:  MOVWF  32
02E4:  MOVFF  16,33
02E8:  RCALL  025A
02EA:  BRA    0300
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02EC:  CLRF   35
02EE:  MOVLW  10
02F0:  MOVWF  36
02F2:  RCALL  01CC
02F4:  BRA    0300
....................      default     : lcd_send_byte(1,c);     break; 
02F6:  MOVLW  01
02F8:  MOVWF  35
02FA:  MOVFF  31,36
02FE:  RCALL  01CC
....................    } 
0300:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... #use rs232(baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits = 8, ERRORS) 
*
00B4:  BTFSS  F9E.5
00B6:  BRA    00B4
00B8:  MOVFF  FAB,17
00BC:  MOVFF  FAE,01
00C0:  BTFSS  17.1
00C2:  BRA    00C8
00C4:  BCF    FAB.4
00C6:  BSF    FAB.4
00C8:  GOTO   00E4 (RETURN)
....................  
.................... #define trigger pin_C0 
.................... #define echo pin_C1 
.................... #define dot pin_E2 
.................... #define RX pin_C7 
.................... #define TX pin_C6 
.................... #define GREEN pin_E0 
.................... #define RED pin_E1 
....................  
.................... #int_TIMER1 
....................  
.................... int16 time, distance, x, i, minVal; 
.................... boolean flag=0; 
.................... char buffer[4]; 
.................... int8 j=0; 
.................... int8 c,d,u; 
....................  
.................... #INT_RDA 
.................... void RDA_isr(void) { 
....................   buffer[j]=getc(); 
00CC:  CLRF   03
00CE:  MOVF   27,W
00D0:  ADDLW  23
00D2:  MOVWF  FE9
00D4:  MOVLW  00
00D6:  ADDWFC 03,W
00D8:  MOVWF  FEA
00DA:  MOVFF  FEA,3D
00DE:  MOVFF  FE9,3C
00E2:  BRA    00B4
00E4:  MOVFF  3D,FEA
00E8:  MOVFF  3C,FE9
00EC:  MOVFF  01,FEF
....................   if(buffer[0]=='!' && flag==0) { 
00F0:  MOVF   23,W
00F2:  SUBLW  21
00F4:  BNZ   0106
00F6:  BTFSC  22.0
00F8:  BRA    0106
....................     j++; 
00FA:  INCF   27,F
....................     if(j>=4) { 
00FC:  MOVF   27,W
00FE:  SUBLW  03
0100:  BC    0106
....................       j=0; 
0102:  CLRF   27
....................       flag=1; 
0104:  BSF    22.0
....................     } 
....................   } 
0106:  BCF    F9E.5
0108:  GOTO   0054
.................... } 
....................  
.................... /* 
.................... * transofmation de la valeur en valeur base 16 
.................... */ 
.................... int16 outputValueParser(int16 value){ 
*
057C:  CLRF   2D
....................    int output = 0; 
....................    if (value < 10) { output = value;} 
057E:  MOVF   2C,F
0580:  BNZ   058E
0582:  MOVF   2B,W
0584:  SUBLW  09
0586:  BNC   058E
0588:  MOVFF  2B,2D
058C:  BRA    05EC
....................    else { 
....................     x = value; 
058E:  MOVFF  2C,1D
0592:  MOVFF  2B,1C
....................     x = x % 10; 
0596:  MOVFF  1D,2F
059A:  MOVFF  1C,2E
059E:  CLRF   31
05A0:  MOVLW  0A
05A2:  MOVWF  30
05A4:  RCALL  038A
05A6:  MOVFF  00,1C
05AA:  MOVFF  03,1D
....................     i = value; 
05AE:  MOVFF  2C,1F
05B2:  MOVFF  2B,1E
....................     i = i/10; 
05B6:  MOVFF  1F,2F
05BA:  MOVFF  1E,2E
05BE:  CLRF   31
05C0:  MOVLW  0A
05C2:  MOVWF  30
05C4:  RCALL  038A
05C6:  MOVFF  02,1F
05CA:  MOVFF  01,1E
....................  
....................     output = x + i*16; 
05CE:  RLCF   1E,W
05D0:  MOVWF  02
05D2:  RLCF   1F,W
05D4:  MOVWF  03
05D6:  RLCF   02,F
05D8:  RLCF   03,F
05DA:  RLCF   02,F
05DC:  RLCF   03,F
05DE:  RLCF   02,F
05E0:  RLCF   03,F
05E2:  MOVLW  F0
05E4:  ANDWF  02,F
05E6:  MOVF   02,W
05E8:  ADDWF  1C,W
05EA:  MOVWF  2D
....................    } 
....................    return output; 
05EC:  CLRF   03
05EE:  MOVFF  2D,01
05F2:  MOVFF  03,02
05F6:  GOTO   084A (RETURN)
.................... } 
....................  
.................... /* 
.................... * trigger de la sonde 
.................... */ 
.................... void triggerSonde(){ 
....................    output_high(trigger); 
*
0374:  BCF    F94.0
0376:  BSF    F8B.0
....................    delay_us(10); 
0378:  MOVLW  10
037A:  MOVWF  00
037C:  DECFSZ 00,F
037E:  BRA    037C
0380:  NOP   
....................    output_low(trigger); 
0382:  BCF    F94.0
0384:  BCF    F8B.0
0386:  GOTO   0658 (RETURN)
.................... } 
....................  
.................... /* 
.................... * Fonctione d'initalisation du LCD 
.................... */ 
.................... void init_lcd(){ 
....................    delay_ms(500); 
*
0322:  MOVLW  02
0324:  MOVWF  2B
0326:  MOVLW  FA
0328:  MOVWF  32
032A:  RCALL  0148
032C:  DECFSZ 2B,F
032E:  BRA    0326
....................    lcd_putc('\f'); 
0330:  MOVLW  0C
0332:  MOVWF  31
0334:  RCALL  02BA
....................    lcd_gotoxy(1,1); 
0336:  MOVLW  01
0338:  MOVWF  32
033A:  MOVWF  33
033C:  RCALL  025A
....................    printf(lcd_putc," Projet Electronique "); 
033E:  MOVLW  0C
0340:  MOVWF  FF6
0342:  MOVLW  01
0344:  MOVWF  FF7
0346:  RCALL  0302
....................    lcd_gotoxy(1,3); 
0348:  MOVLW  01
034A:  MOVWF  32
034C:  MOVLW  03
034E:  MOVWF  33
0350:  RCALL  025A
....................    printf(lcd_putc," 2020 Groupe 3 "); 
0352:  MOVLW  22
0354:  MOVWF  FF6
0356:  MOVLW  01
0358:  MOVWF  FF7
035A:  RCALL  0302
....................    delay_ms(1000); 
035C:  MOVLW  04
035E:  MOVWF  2B
0360:  MOVLW  FA
0362:  MOVWF  32
0364:  RCALL  0148
0366:  DECFSZ 2B,F
0368:  BRA    0360
....................    lcd_putc('\f'); 
036A:  MOVLW  0C
036C:  MOVWF  31
036E:  RCALL  02BA
0370:  GOTO   0652 (RETURN)
.................... } 
....................  
....................  
.................... /* 
.................... * fonction principale 
.................... */ 
.................... void main() 
*
05FA:  CLRF   FF8
05FC:  BCF    FD0.7
05FE:  BSF    07.7
0600:  BSF    00.0
0602:  CLRF   17
0604:  MOVLW  81
0606:  MOVWF  FAF
0608:  MOVLW  A6
060A:  MOVWF  FAC
060C:  MOVLW  90
060E:  MOVWF  FAB
0610:  BCF    22.0
0612:  CLRF   27
0614:  BSF    FC1.0
0616:  BSF    FC1.1
0618:  BSF    FC1.2
061A:  BCF    FC1.3
061C:  MOVLW  07
061E:  MOVWF  FB4
.................... { 
....................    setup_low_volt_detect(FALSE); 
0620:  CLRF   FD2
....................  
....................    setup_spi(FALSE); 
0622:  CLRF   FC6
....................    setup_wdt(WDT_OFF); 
0624:  BCF    FD1.0
....................    setup_timer_1( T1_INTERNAL | T1_DIV_BY_1  ); 
0626:  MOVLW  85
0628:  MOVWF  FCD
....................    setup_comparator(NC_NC_NC_NC); 
062A:  MOVLW  07
062C:  MOVWF  FB4
062E:  MOVF   F95,W
0630:  MOVWF  F95
0632:  MOVF   F96,W
0634:  MOVWF  F96
0636:  MOVLW  10
0638:  MOVWF  00
063A:  DECFSZ 00,F
063C:  BRA    063A
063E:  NOP   
0640:  MOVF   FB4,W
0642:  BCF    FA1.6
....................    setup_vref(FALSE); 
0644:  CLRF   FB5
....................    setup_oscillator(False); 
0646:  CLRF   FD3
....................  
....................    enable_interrupts(INT_RDA); // interuption sur r�ception port RS232 
0648:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
064A:  MOVLW  C0
064C:  IORWF  FF2,F
....................  
....................    lcd_init(); 
064E:  BRA    0202
....................    init_lcd(); 
0650:  BRA    0322
....................  
....................    while(true) 
....................    { 
....................  
....................    // setup des valeurs 
....................    time = 0; 
0652:  CLRF   19
0654:  CLRF   18
....................  
....................    // recuperation minValue envoye par JAVA 
....................    //minVal = 100; 
....................  
....................    // d�clanchement de la sonde 
....................    triggerSonde(); 
0656:  BRA    0374
....................  
....................    // recuperation valeur temps de la sonde 
....................    while(input(echo) == 0){} // attente debut 
0658:  BSF    F94.1
065A:  BTFSS  F82.1
065C:  BRA    0658
....................    set_timer1(0); 
065E:  CLRF   FCF
0660:  CLRF   FCE
....................    while(input(echo) == 1){} // attente fin 
0662:  BSF    F94.1
0664:  BTFSC  F82.1
0666:  BRA    0662
....................    time = get_timer1(); 
0668:  MOVF   FCE,W
066A:  MOVWF  18
066C:  MOVFF  FCF,19
....................  
....................    // temps => distance 
....................    distance = time/285; 
0670:  MOVFF  19,2F
0674:  MOVFF  18,2E
0678:  MOVLW  01
067A:  MOVWF  31
067C:  MOVLW  1D
067E:  MOVWF  30
0680:  RCALL  038A
0682:  MOVFF  02,1B
0686:  MOVFF  01,1A
....................  
....................    // envoie distance ici java 
....................    printf(" %ld", distance); 
068A:  MOVLW  20
068C:  BTFSS  F9E.4
068E:  BRA    068C
0690:  MOVWF  FAD
0692:  MOVLW  10
0694:  MOVWF  FE9
0696:  MOVFF  1B,2C
069A:  MOVFF  1A,2B
069E:  BRA    03CC
....................    printf("\n"); 
06A0:  MOVLW  0A
06A2:  BTFSS  F9E.4
06A4:  BRA    06A2
06A6:  MOVWF  FAD
....................  
....................    // si donn�es recu depuis java sur RS232 > interuption INT_RSA 
....................    if(flag==1){ 
06A8:  BTFSS  22.0
06AA:  BRA    06D6
....................      c=buffer[1]-48; 
06AC:  MOVLW  30
06AE:  SUBWF  24,W
06B0:  MOVWF  28
....................      d=buffer[2]-48; 
06B2:  MOVLW  30
06B4:  SUBWF  25,W
06B6:  MOVWF  29
....................      u=buffer[3]-48; 
06B8:  MOVLW  30
06BA:  SUBWF  26,W
06BC:  MOVWF  2A
....................      minVal=(int16) (c*100+d*10+u); 
06BE:  MOVF   28,W
06C0:  MULLW  64
06C2:  MOVFF  FF3,2B
06C6:  MOVF   29,W
06C8:  MULLW  0A
06CA:  MOVF   FF3,W
06CC:  ADDWF  2B,W
06CE:  ADDWF  2A,W
06D0:  CLRF   21
06D2:  MOVWF  20
....................      flag=0; 
06D4:  BCF    22.0
....................    } 
....................  
....................     
....................    // cr�ation valeurs LCD MINvalue 
....................    c = minVal/100; 
06D6:  MOVFF  21,2F
06DA:  MOVFF  20,2E
06DE:  CLRF   31
06E0:  MOVLW  64
06E2:  MOVWF  30
06E4:  RCALL  038A
06E6:  MOVFF  01,28
....................    d = (minVal-(c*100))/10; 
06EA:  MOVF   28,W
06EC:  MULLW  64
06EE:  MOVF   FF3,W
06F0:  SUBWF  20,W
06F2:  MOVWF  2B
06F4:  MOVLW  00
06F6:  SUBWFB 21,W
06F8:  MOVWF  2C
06FA:  MOVWF  2F
06FC:  MOVFF  2B,2E
0700:  CLRF   31
0702:  MOVLW  0A
0704:  MOVWF  30
0706:  RCALL  038A
0708:  MOVFF  01,29
....................    u = (minVal-(c*100))-(d*10); 
070C:  MOVF   28,W
070E:  MULLW  64
0710:  MOVF   FF3,W
0712:  SUBWF  20,W
0714:  MOVWF  2B
0716:  MOVLW  00
0718:  SUBWFB 21,W
071A:  MOVF   29,W
071C:  MULLW  0A
071E:  MOVF   FF3,W
0720:  SUBWF  2B,W
0722:  MOVWF  2A
....................    // Affichage MinValue LCD 
....................    lcd_gotoxy(3,1); 
0724:  MOVLW  03
0726:  MOVWF  32
0728:  MOVLW  01
072A:  MOVWF  33
072C:  RCALL  025A
....................    printf(lcd_putc, " MinVal: "); 
072E:  MOVLW  32
0730:  MOVWF  FF6
0732:  MOVLW  01
0734:  MOVWF  FF7
0736:  RCALL  0302
....................    printf(lcd_putc, "%d", c); 
0738:  MOVFF  28,2B
073C:  MOVLW  18
073E:  MOVWF  2C
0740:  RCALL  04D2
....................    printf(lcd_putc, "%d", d); 
0742:  MOVFF  29,2B
0746:  MOVLW  18
0748:  MOVWF  2C
074A:  RCALL  04D2
....................    printf(lcd_putc, "%d", u); 
074C:  MOVFF  2A,2B
0750:  MOVLW  18
0752:  MOVWF  2C
0754:  RCALL  04D2
....................     
....................    // cr�eation valeurs Distance LCD 
....................    c = distance/100; 
0756:  MOVFF  1B,2F
075A:  MOVFF  1A,2E
075E:  CLRF   31
0760:  MOVLW  64
0762:  MOVWF  30
0764:  RCALL  038A
0766:  MOVFF  01,28
....................    d = (distance-(c*100))/10; 
076A:  MOVF   28,W
076C:  MULLW  64
076E:  MOVF   FF3,W
0770:  SUBWF  1A,W
0772:  MOVWF  2B
0774:  MOVLW  00
0776:  SUBWFB 1B,W
0778:  MOVWF  2C
077A:  MOVWF  2F
077C:  MOVFF  2B,2E
0780:  CLRF   31
0782:  MOVLW  0A
0784:  MOVWF  30
0786:  RCALL  038A
0788:  MOVFF  01,29
....................    u = (distance-(c*100))-(d*10); 
078C:  MOVF   28,W
078E:  MULLW  64
0790:  MOVF   FF3,W
0792:  SUBWF  1A,W
0794:  MOVWF  2B
0796:  MOVLW  00
0798:  SUBWFB 1B,W
079A:  MOVF   29,W
079C:  MULLW  0A
079E:  MOVF   FF3,W
07A0:  SUBWF  2B,W
07A2:  MOVWF  2A
....................    // affichage distance LCD 
....................    lcd_gotoxy(3,3); 
07A4:  MOVLW  03
07A6:  MOVWF  32
07A8:  MOVWF  33
07AA:  RCALL  025A
....................    printf(lcd_putc, " Distance: "); 
07AC:  MOVLW  3C
07AE:  MOVWF  FF6
07B0:  MOVLW  01
07B2:  MOVWF  FF7
07B4:  RCALL  0302
....................    printf(lcd_putc, "%d", c); 
07B6:  MOVFF  28,2B
07BA:  MOVLW  18
07BC:  MOVWF  2C
07BE:  RCALL  04D2
....................    printf(lcd_putc, "%d", d); 
07C0:  MOVFF  29,2B
07C4:  MOVLW  18
07C6:  MOVWF  2C
07C8:  RCALL  04D2
....................    printf(lcd_putc, "%d", u); 
07CA:  MOVFF  2A,2B
07CE:  MOVLW  18
07D0:  MOVWF  2C
07D2:  RCALL  04D2
....................  
....................    // v�rification borne minVal 
....................    if (distance < minVal){ 
07D4:  MOVF   1B,W
07D6:  SUBWF  21,W
07D8:  BNC   07FC
07DA:  BNZ   07E2
07DC:  MOVF   20,W
07DE:  SUBWF  1A,W
07E0:  BC    07FC
....................       // allumer red => trop proche 
....................       printf("1\n"); 
07E2:  MOVLW  31
07E4:  BTFSS  F9E.4
07E6:  BRA    07E4
07E8:  MOVWF  FAD
07EA:  MOVLW  0A
07EC:  BTFSS  F9E.4
07EE:  BRA    07EC
07F0:  MOVWF  FAD
....................       output_high(RED); 
07F2:  BCF    F96.1
07F4:  BSF    F8D.1
....................       output_low(GREEN); 
07F6:  BCF    F96.0
07F8:  BCF    F8D.0
....................    } 
07FA:  BRA    0814
....................    else { 
....................       // allumer green => OK 
....................       printf("2\n"); 
07FC:  MOVLW  32
07FE:  BTFSS  F9E.4
0800:  BRA    07FE
0802:  MOVWF  FAD
0804:  MOVLW  0A
0806:  BTFSS  F9E.4
0808:  BRA    0806
080A:  MOVWF  FAD
....................       output_high(GREEN); 
080C:  BCF    F96.0
080E:  BSF    F8D.0
....................       output_low(RED); 
0810:  BCF    F96.1
0812:  BCF    F8D.1
....................    } 
....................  
....................    // gestion du point si > que 100 !> cm -> m 
....................    if(distance > 99){ 
0814:  MOVF   1B,F
0816:  BNZ   081E
0818:  MOVF   1A,W
081A:  SUBLW  63
081C:  BC    083C
....................       distance = distance / 10; 
081E:  MOVFF  1B,2F
0822:  MOVFF  1A,2E
0826:  CLRF   31
0828:  MOVLW  0A
082A:  MOVWF  30
082C:  RCALL  038A
082E:  MOVFF  02,1B
0832:  MOVFF  01,1A
....................       output_high(dot); 
0836:  BCF    F96.2
0838:  BSF    F8D.2
....................    } 
083A:  BRA    0840
....................    else { 
....................       output_low(dot); 
083C:  BCF    F96.2
083E:  BCF    F8D.2
....................    } 
....................  
....................    // affichage sur 7seg de la distance 
....................    output_b(outputValueParser(distance)); 
0840:  MOVFF  1B,2C
0844:  MOVFF  1A,2B
0848:  BRA    057C
084A:  CLRF   F93
084C:  MOVFF  01,F8A
....................  
....................  
....................    // attente pour eviter spam 
....................    delay_ms(500); 
0850:  MOVLW  02
0852:  MOVWF  2B
0854:  MOVLW  FA
0856:  MOVWF  32
0858:  RCALL  0148
085A:  DECFSZ 2B,F
085C:  BRA    0854
085E:  BRA    0652
....................    } 
....................  
.................... } 
0860:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV25 NOWDT WDT128
   Word  3: 0000  
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
