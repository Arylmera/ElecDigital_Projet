D G "__PCH__" 0 0 ""5.094d""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""11-Apr-20""
D G "__TIME__" 0 0 ""15:20:52""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the PIC18F458 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 40 ""
v L "value" 2 40 "int8" `55 
f B "set_tris_a" 2 40 "void(int8 value)" `54 
f N "set_tris_b" 2 41 ""
v L "value" 2 41 "int8" `57 
f B "set_tris_b" 2 41 "void(int8 value)" `56 
f N "set_tris_c" 2 42 ""
v L "value" 2 42 "int8" `59 
f B "set_tris_c" 2 42 "void(int8 value)" `58 
f N "set_tris_d" 2 43 ""
v L "value" 2 43 "int8" `61 
f B "set_tris_d" 2 43 "void(int8 value)" `60 
f N "set_tris_e" 2 44 ""
v L "value" 2 44 "int8" `63 
f B "set_tris_e" 2 44 "void(int8 value)" `62 
f N "get_tris_a" 2 45 ""
f B "get_tris_a" 2 45 "int8()" `64 
f N "get_tris_b" 2 46 ""
f B "get_tris_b" 2 46 "int8()" `65 
f N "get_tris_c" 2 47 ""
f B "get_tris_c" 2 47 "int8()" `66 
f N "get_tris_d" 2 48 ""
f B "get_tris_d" 2 48 "int8()" `67 
f N "get_tris_e" 2 49 ""
f B "get_tris_e" 2 49 "int8()" `68 
f N "output_a" 2 50 ""
v L "value" 2 50 "int8" `70 
f B "output_a" 2 50 "void(int8 value)" `69 
f N "output_b" 2 51 ""
v L "value" 2 51 "int8" `72 
f B "output_b" 2 51 "void(int8 value)" `71 
f N "output_c" 2 52 ""
v L "value" 2 52 "int8" `74 
f B "output_c" 2 52 "void(int8 value)" `73 
f N "output_d" 2 53 ""
v L "value" 2 53 "int8" `76 
f B "output_d" 2 53 "void(int8 value)" `75 
f N "output_e" 2 54 ""
v L "value" 2 54 "int8" `78 
f B "output_e" 2 54 "void(int8 value)" `77 
f N "input_a" 2 55 ""
f B "input_a" 2 55 "int8()" `79 
f N "input_b" 2 56 ""
f B "input_b" 2 56 "int8()" `80 
f N "input_c" 2 57 ""
f B "input_c" 2 57 "int8()" `81 
f N "input_d" 2 58 ""
f B "input_d" 2 58 "int8()" `82 
f N "input_e" 2 59 ""
f B "input_e" 2 59 "int8()" `83 
f N "input_change_a" 2 60 ""
f B "input_change_a" 2 60 "int8()" `84 
f N "input_change_b" 2 61 ""
f B "input_change_b" 2 61 "int8()" `85 
f N "input_change_c" 2 62 ""
f B "input_change_c" 2 62 "int8()" `86 
f N "input_change_d" 2 63 ""
f B "input_change_d" 2 63 "int8()" `87 
f N "input_change_e" 2 64 ""
f B "input_change_e" 2 64 "int8()" `88 
f N "port_b_pullups" 2 65 ""
v L "value" 2 65 "int8" `90 
f B "port_b_pullups" 2 65 "void(int8 value)" `89 
f N "input" 2 66 ""
v L "pin" 2 66 "int16" `92 
f B "input" 2 66 "int8(int16 pin)" `91 
f N "input_state" 2 67 ""
v L "pin" 2 67 "int16" `94 
f B "input_state" 2 67 "int8(int16 pin)" `93 
f N "output_low" 2 68 ""
v L "pin" 2 68 "int16" `96 
f B "output_low" 2 68 "void(int16 pin)" `95 
f N "output_high" 2 69 ""
v L "pin" 2 69 "int16" `98 
f B "output_high" 2 69 "void(int16 pin)" `97 
f N "output_toggle" 2 70 ""
v L "pin" 2 70 "int16" `100 
f B "output_toggle" 2 70 "void(int16 pin)" `99 
f N "output_bit" 2 71 ""
v L "pin" 2 71 "int16" `102 
v L "level" 2 71 "int8" `103 
f B "output_bit" 2 71 "void(int16 pin,int8 level)" `101 
f N "output_float" 2 72 ""
v L "pin" 2 72 "int16" `105 
f B "output_float" 2 72 "void(int16 pin)" `104 
f N "output_drive" 2 73 ""
v L "pin" 2 73 "int16" `107 
f B "output_drive" 2 73 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 77 "31744"
d G "PIN_A1" 2 78 "31745"
d G "PIN_A2" 2 79 "31746"
d G "PIN_A3" 2 80 "31747"
d G "PIN_A4" 2 81 "31748"
d G "PIN_A5" 2 82 "31749"
d G "PIN_A6" 2 83 "31750"
d G "PIN_B0" 2 85 "31752"
d G "PIN_B1" 2 86 "31753"
d G "PIN_B2" 2 87 "31754"
d G "PIN_B3" 2 88 "31755"
d G "PIN_B4" 2 89 "31756"
d G "PIN_B5" 2 90 "31757"
d G "PIN_B6" 2 91 "31758"
d G "PIN_B7" 2 92 "31759"
d G "PIN_C0" 2 94 "31760"
d G "PIN_C1" 2 95 "31761"
d G "PIN_C2" 2 96 "31762"
d G "PIN_C3" 2 97 "31763"
d G "PIN_C4" 2 98 "31764"
d G "PIN_C5" 2 99 "31765"
d G "PIN_C6" 2 100 "31766"
d G "PIN_C7" 2 101 "31767"
d G "PIN_D0" 2 103 "31768"
d G "PIN_D1" 2 104 "31769"
d G "PIN_D2" 2 105 "31770"
d G "PIN_D3" 2 106 "31771"
d G "PIN_D4" 2 107 "31772"
d G "PIN_D5" 2 108 "31773"
d G "PIN_D6" 2 109 "31774"
d G "PIN_D7" 2 110 "31775"
d G "PIN_E0" 2 112 "31776"
d G "PIN_E1" 2 113 "31777"
d G "PIN_E2" 2 114 "31778"
d G "FALSE" 2 117 "0"
d G "TRUE" 2 118 "1"
d G "BYTE" 2 120 "int8"
d G "BOOLEAN" 2 121 "int1"
d G "getc" 2 123 "getch"
d G "fgetc" 2 124 "getch"
d G "getchar" 2 125 "getch"
d G "putc" 2 126 "putchar"
d G "fputc" 2 127 "putchar"
d G "fgets" 2 128 "gets"
d G "fputs" 2 129 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 134 ""
f B "restart_cause" 2 134 "int8()" `108 
f N "reset_cpu" 2 135 ""
f B "reset_cpu" 2 135 "void()" `109 
f N "sleep" 2 136 ""
f B "sleep" 2 136 "void()" `110  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 138 "7"
d G "MCLR_FROM_SLEEP" 2 139 "11"
d G "MCLR_FROM_RUN" 2 140 "15"
d G "NORMAL_POWER_UP" 2 141 "12"
d G "BROWNOUT_RESTART" 2 142 "14"
d G "WDT_FROM_SLEEP" 2 143 "3"
d G "RESET_INSTRUCTION" 2 144 "0"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 151 ""
v L "mode" 2 151 "int8" `112 
f B "setup_timer_0" 2 151 "void(int8 mode)" `111 
f N "set_timer0" 2 152 ""
v L "value" 2 152 "int16" `114 
f B "set_timer0" 2 152 "void(int16 value)" `113 
f N "get_timer0" 2 153 ""
f B "get_timer0" 2 153 "int16()" `115 
f N "setup_counters" 2 154 ""
v L "mode" 2 154 "int8" `117 
v L "prescaler" 2 154 "int8" `118 
f B "setup_counters" 2 154 "void(int8 mode,int8 prescaler)" `116 
f N "set_rtcc" 2 155 ""
v L "value" 2 155 "int16" `120 
f B "set_rtcc" 2 155 "void(int16 value)" `119 
f N "get_rtcc" 2 156 ""
f B "get_rtcc" 2 156 "int16()" `121  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 158 "0"
d G "T0_EXT_L_TO_H" 2 159 "32"
d G "T0_EXT_H_TO_L" 2 160 "48"
d G "T0_DIV_1" 2 162 "8"
d G "T0_DIV_2" 2 163 "0"
d G "T0_DIV_4" 2 164 "1"
d G "T0_DIV_8" 2 165 "2"
d G "T0_DIV_16" 2 166 "3"
d G "T0_DIV_32" 2 167 "4"
d G "T0_DIV_64" 2 168 "5"
d G "T0_DIV_128" 2 169 "6"
d G "T0_DIV_256" 2 170 "7"
d G "T0_OFF" 2 172 "0x80"
d G "T0_8_BIT" 2 174 "0x40"
d G "RTCC_INTERNAL" 2 178 "0"
d G "RTCC_EXT_L_TO_H" 2 179 "32"
d G "RTCC_EXT_H_TO_L" 2 180 "48"
d G "RTCC_DIV_1" 2 181 "8"
d G "RTCC_DIV_2" 2 182 "0"
d G "RTCC_DIV_4" 2 183 "1"
d G "RTCC_DIV_8" 2 184 "2"
d G "RTCC_DIV_16" 2 185 "3"
d G "RTCC_DIV_32" 2 186 "4"
d G "RTCC_DIV_64" 2 187 "5"
d G "RTCC_DIV_128" 2 188 "6"
d G "RTCC_DIV_256" 2 189 "7"
d G "RTCC_OFF" 2 190 "0x80"
d G "RTCC_8_BIT" 2 191 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 202 ""
v L "mode" 2 202 "int16" `123 
f B "setup_wdt" 2 202 "void(int16 mode)" `122 
f N "restart_wdt" 2 203 ""
f B "restart_wdt" 2 203 "void()" `124  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 205 "0x100"
d G "WDT_OFF" 2 206 "0"
d G "WDT_18MS" 2 208 "0x300"
d G "WDT_36MS" 2 209 "0x500"
d G "WDT_72MS" 2 210 "0x700"
d G "WDT_144MS" 2 211 "0x900"
d G "WDT_288MS" 2 212 "0xB00"
d G "WDT_576MS" 2 213 "0xD00"
d G "WDT_1152MS" 2 214 "0xF00"
d G "WDT_2304MS" 2 215 "0x1108"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 221 ""
v L "mode" 2 221 "int16" `126 
f B "setup_timer_1" 2 221 "void(int16 mode)" `125 
f N "get_timer1" 2 222 ""
f B "get_timer1" 2 222 "int16()" `127 
f N "set_timer1" 2 223 ""
v L "value" 2 223 "int16" `129 
f B "set_timer1" 2 223 "void(int16 value)" `128  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 226 "0"
d G "T1_INTERNAL" 2 227 "0x85"
d G "T1_EXTERNAL" 2 228 "0x87"
d G "T1_EXTERNAL_SYNC" 2 229 "0x83"
d G "T1_CLK_OUT" 2 231 "8"
d G "T1_DIV_BY_1" 2 233 "0"
d G "T1_DIV_BY_2" 2 234 "0x10"
d G "T1_DIV_BY_4" 2 235 "0x20"
d G "T1_DIV_BY_8" 2 236 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 241 ""
v L "mode" 2 241 "int8" `131 
v L "period" 2 241 "int8" `132 
v L "postscale" 2 241 "int8" `133 
f B "setup_timer_2" 2 241 "void(int8 mode,int8 period,int8 postscale)" `130 
f N "get_timer2" 2 242 ""
f B "get_timer2" 2 242 "int8()" `134 
f N "set_timer2" 2 243 ""
v L "value" 2 243 "int8" `136 
f B "set_timer2" 2 243 "void(int8 value)" `135  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 245 "0"
d G "T2_DIV_BY_1" 2 246 "4"
d G "T2_DIV_BY_4" 2 247 "5"
d G "T2_DIV_BY_16" 2 248 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 253 ""
v L "mode" 2 253 "int16" `138 
f B "setup_timer_3" 2 253 "void(int16 mode)" `137 
f N "get_timer3" 2 254 ""
f B "get_timer3" 2 254 "int16()" `139 
f N "set_timer3" 2 255 ""
v L "value" 2 255 "int16" `141 
f B "set_timer3" 2 255 "void(int16 value)" `140  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 258 "0"
d G "T3_INTERNAL" 2 259 "0x85"
d G "T3_EXTERNAL" 2 260 "0x87"
d G "T3_EXTERNAL_SYNC" 2 261 "0x83"
d G "T3_DIV_BY_1" 2 263 "0"
d G "T3_DIV_BY_2" 2 264 "0x10"
d G "T3_DIV_BY_4" 2 265 "0x20"
d G "T3_DIV_BY_8" 2 266 "0x30"
d G "T3_CCP1_TO_2" 2 269 "0x48"
d G "T3_CCP2" 2 270 "0x8"
c L "set_timer3" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 276 ""
v L "mode" 2 276 "int32" `143 
f B "setup_ccp1" 2 276 "void(int32 mode)" `142 
f N "setup_ccp1" 2 277 ""
v L "mode" 2 277 "int32" `145 
v L "pwm" 2 277 "int8" `146 
f B "setup_ccp1" 2 277 "void(int32 mode,int8 pwm)" `144 
f N "set_pwm1_duty" 2 278 ""
v L "value" 2 278 "int8" `148 
f B "set_pwm1_duty" 2 278 "void(int8 value)" `147 
f N "set_pwm1_duty" 2 279 ""
v L "value" 2 279 "int16" `150 
f B "set_pwm1_duty" 2 279 "void(int16 value)" `149  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 281 "0"
d G "CCP_CAPTURE_FE" 2 282 "0x04"
d G "CCP_CAPTURE_RE" 2 283 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 284 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 285 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 286 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 287 "0x09"
d G "CCP_COMPARE_INT" 2 288 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 289 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 290 "0x0B"
d G "CCP_PWM" 2 291 "0x0C"
d G "CCP_PWM_PLUS_1" 2 292 "0x1c"
d G "CCP_PWM_PLUS_2" 2 293 "0x2c"
d G "CCP_PWM_PLUS_3" 2 294 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_PWM_H_H" 2 302 "0x0c"
d G "CCP_PWM_H_L" 2 303 "0x0d"
d G "CCP_PWM_L_H" 2 304 "0x0e"
d G "CCP_PWM_L_L" 2 305 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 307 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 308 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 309 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 311 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 312 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 313 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 314 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 315 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 316 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 317 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 319 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 320 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 321 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 323 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 324 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 325 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 327 "0x80000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 330 ""
v L "mode" 2 330 "int32" `155 
f B "setup_ccp2" 2 330 "void(int32 mode)" `154 
f N "setup_ccp2" 2 331 ""
v L "mode" 2 331 "int32" `157 
v L "pwm" 2 331 "int8" `158 
f B "setup_ccp2" 2 331 "void(int32 mode,int8 pwm)" `156 
f N "set_pwm2_duty" 2 332 ""
v L "value" 2 332 "int8" `160 
f B "set_pwm2_duty" 2 332 "void(int8 value)" `159 
f N "set_pwm2_duty" 2 333 ""
v L "value" 2 333 "int16" `162 
f B "set_pwm2_duty" 2 333 "void(int16 value)" `161 
c L "set_pwm2_duty" 2 3 5 "FUNCTION"
f N "setup_psp" 2 343 ""
v L "mode" 2 343 "int8" `167 
f B "setup_psp" 2 343 "void(int8 mode)" `166 
f N "psp_output_full" 2 344 ""
f B "psp_output_full" 2 344 "int8()" `168 
f N "psp_input_full" 2 345 ""
f B "psp_input_full" 2 345 "int8()" `169 
f N "psp_overflow" 2 346 ""
f B "psp_overflow" 2 346 "int8()" `170  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 348 "0x10"
d G "PSP_DISABLED" 2 349 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
f N "setup_spi" 2 356 ""
v L "mode" 2 356 "int32" `173 
f B "setup_spi" 2 356 "void(int32 mode)" `172 
f N "spi_write" 2 357 ""
v L "value" 2 357 "int8" `175 
f B "spi_write" 2 357 "void(int8 value)" `174 
f N "spi_write" 2 358 ""
v L "wait" 2 358 "int8" `177 
v L "value" 2 358 "int8" `178 
f B "spi_write" 2 358 "void(int8 wait,int8 value)" `176 
f N "spi_read" 2 359 ""
f B "spi_read" 2 359 "int8()" `179 
f N "spi_read" 2 360 ""
v L "value" 2 360 "int8" `181 
f B "spi_read" 2 360 "int8(int8 value)" `180 
f N "spi_data_is_in" 2 361 ""
f B "spi_data_is_in" 2 361 "int8()" `182 
f N "setup_spi2" 2 362 ""
v L "mode" 2 362 "int32" `184 
f B "setup_spi2" 2 362 "void(int32 mode)" `183 
f N "spi_write2" 2 363 ""
v L "value" 2 363 "int8" `186 
f B "spi_write2" 2 363 "void(int8 value)" `185 
f N "spi_read2" 2 364 ""
f B "spi_read2" 2 364 "int8()" `187 
f N "spi_read2" 2 365 ""
v L "value" 2 365 "int8" `189 
f B "spi_read2" 2 365 "int8(int8 value)" `188 
f N "spi_data_is_in2" 2 366 ""
f B "spi_data_is_in2" 2 366 "int8()" `190  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 368 "0x00"
d G "SPI_MASTER" 2 369 "0x20"
d G "SPI_SLAVE" 2 370 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 371 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 372 "0x00"
d G "SPI_CLK_DIV_4" 2 373 "0x00"
d G "SPI_CLK_DIV_16" 2 374 "0x01"
d G "SPI_CLK_DIV_64" 2 375 "0x02"
d G "SPI_CLK_T2" 2 376 "0x03"
d G "SPI_SS_DISABLED" 2 377 "0x01"
d G "SPI_XMIT_L_TO_H" 2 379 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 380 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 382 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 383 "0x8000"
d G "SPI_L_TO_H" 2 386 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 387 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 391 ""
v L "baud" 2 391 "int32" `192 
f B "setup_uart" 2 391 "void(int32 baud)" `191 
f N "setup_uart" 2 392 ""
v L "baud" 2 392 "int32" `194 
v L "stream" 2 392 "int8" `195 
f B "setup_uart" 2 392 "void(int32 baud,int8 stream)" `193 
f N "setup_uart" 2 393 ""
v L "baud" 2 393 "int32" `197 
v L "stream" 2 393 "int8" `198 
v L "clock" 2 393 "int32" `199 
f B "setup_uart" 2 393 "void(int32 baud,int8 stream,int32 clock)" `196 
f N "set_uart_speed" 2 394 ""
v L "baud" 2 394 "int32" `201 
f B "set_uart_speed" 2 394 "void(int32 baud)" `200 
f N "set_uart_speed" 2 395 ""
v L "baud" 2 395 "int32" `203 
v L "stream" 2 395 "int8" `204 
f B "set_uart_speed" 2 395 "void(int32 baud,int8 stream)" `202 
f N "set_uart_speed" 2 396 ""
v L "baud" 2 396 "int32" `206 
v L "stream" 2 396 "int8" `207 
v L "clock" 2 396 "int32" `208 
f B "set_uart_speed" 2 396 "void(int32 baud,int8 stream,int32 clock)" `205  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 400 "2"
d G "UART_DATA" 2 401 "4"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 405 ""
v L "mode" 2 405 "int32" `210 
f B "setup_comparator" 2 405 "void(int32 mode)" `209  "Constants used in setup_comparator() are:"
d G "D1_D0_D3_D0" 2 407 "0x0Bff04"
d G "D1_D0_D3_D2_OUT_ON_E1_E2" 2 408 "0x0FF903"
d G "D1_D0_D3_D0_OUT_ON_E1_E2" 2 409 "0x0BF905"
d G "NC_NC_NC_NC" 2 410 "0x00ff07"
d G "D1_D0_D3_D2" 2 411 "0x0Fff02"
d G "D1_D0_NC_NC_OUT_ON_E1" 2 412 "0x03FD01"
d G "D1_VR_D3_VR" 2 413 "0x0Aff06"
d G "D0_VR_D2_VR" 2 414 "0x05ff0e"
d G "CP1_INVERT" 2 415 "0x0000010"
d G "CP2_INVERT" 2 416 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 423 ""
v L "mode" 2 423 "int8" `214 
f B "setup_vref" 2 423 "void(int8 mode)" `213  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 425 "0xa0"
d G "VREF_HIGH" 2 426 "0x80"
d G "VREF_F5" 2 428 "0x40"
d G "VREF_COMP" 2 429 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 433 ""
v L "mode" 2 433 "int8" `216 
f B "setup_low_volt_detect" 2 433 "void(int8 mode)" `215  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 435 "0x1F"
d G "LVD_45" 2 436 "0x1E"
d G "LVD_42" 2 437 "0x1D"
d G "LVD_40" 2 438 "0x1C"
d G "LVD_38" 2 439 "0x1B"
d G "LVD_36" 2 440 "0x1A"
d G "LVD_35" 2 441 "0x19"
d G "LVD_33" 2 442 "0x18"
d G "LVD_30" 2 443 "0x17"
d G "LVD_28" 2 444 "0x16"
d G "LVD_27" 2 445 "0x15"
d G "LVD_25" 2 446 "0x14"
d G "LVD_23" 2 447 "0x13"
d G "LVD_21" 2 448 "0x12"
d G "LVD_19" 2 449 "0x11"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 454 ""
v L "mode" 2 454 "int8" `218 
f B "setup_oscillator" 2 454 "void(int8 mode)" `217  "Constants used in setup_oscillator() are:"
d G "OSC_TIMER1" 2 456 "1"
d G "OSC_NORMAL" 2 457 "0"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 464 ""
v L "mode" 2 464 "int32" `220 
f B "setup_adc" 2 464 "void(int32 mode)" `219 
f N "read_adc" 2 465 ""
f B "read_adc" 2 465 "int8()" `221 
f N "read_adc" 2 466 ""
v L "mode" 2 466 "int8" `223 
f B "read_adc" 2 466 "int8(int8 mode)" `222 
f N "read_adc" 2 467 ""
f G "read_adc" 2 467 "int16()" `224 
f N "read_adc" 2 468 ""
v L "mode" 2 468 "int8" `225 
f G "read_adc" 2 468 "int16(int8 mode)" `224 
f N "adc_done" 2 469 ""
f B "adc_done" 2 469 "int8(int8 mode)" `224  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 471 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 472 "0x10000"
d G "ADC_CLOCK_DIV_4" 2 473 "0x4000"
d G "ADC_CLOCK_DIV_8" 2 474 "0x0040"
d G "ADC_CLOCK_DIV_16" 2 475 "0x4040"
d G "ADC_CLOCK_DIV_32" 2 476 "0x0080"
d G "ADC_CLOCK_DIV_64" 2 477 "0x4080"
d G "ADC_CLOCK_INTERNAL" 2 478 "0x00c0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 481 ""
v L "setting" 2 481 "int8" `226 
f B "setup_adc_ports" 2 481 "void(int8 setting)" `225 
f N "set_analog_pins" 2 482 ""
v L "setting" 2 482 "int8" `228 
f B "set_analog_pins" 2 482 "void(int8 setting)" `227 
f N "set_adc_channel" 2 483 ""
v L "channel" 2 483 "int8" `230 
f B "set_adc_channel" 2 483 "void(int8 channel)" `229  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 2 485 "7" "None"
d G "ALL_ANALOG" 2 486 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 2 487 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 2 488 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 2 489 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 2 490 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 491 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 2 492 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 2 493 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 2 494 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 2 495 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 2 496 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 2 497 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 2 498 "0x0E" "A0"
d G "AN0_VREF_VREF" 2 499 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 2 500 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 2 501 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 2 502 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 503 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 504 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 2 505 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 2 506 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 2 507 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 2 508 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 2 509 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 2 510 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 2 511 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 2 512 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 515 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 516 "1"
d G "ADC_READ_ONLY" 2 517 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 523 ""
v L "x" 2 523 "sint8" `232 
f B "abs" 2 523 "sint8(sint8 x)" `231 
f N "abs" 2 524 ""
v L "x" 2 524 "sint16" `234 
f B "abs" 2 524 "sint16(sint16 x)" `233 
f N "abs" 2 525 ""
v L "x" 2 525 "sint32" `236 
f B "abs" 2 525 "sint32(sint32 x)" `235 
f N "abs" 2 526 ""
v L "x" 2 526 "float" `238 
f B "abs" 2 526 "float(float x)" `237 
f N "_mul" 2 527 ""
v L "??65535" 2 527 "int8" `240 
v L "??65535" 2 527 "int8" `241 
f B "_mul" 2 527 "int16(int8 ,int8 )" `239 
f N "_mul" 2 528 ""
v L "??65535" 2 528 "sint8" `243 
v L "??65535" 2 528 "sint8" `244 
f B "_mul" 2 528 "sint16(sint8 ,sint8 )" `242 
f N "_mul" 2 529 ""
v L "??65535" 2 529 "int16" `246 
v L "??65535" 2 529 "int16" `247 
f B "_mul" 2 529 "int32(int16 ,int16 )" `245 
f N "_mul" 2 530 ""
v L "??65535" 2 530 "sint16" `249 
v L "??65535" 2 530 "sint16" `250 
f B "_mul" 2 530 "sint32(sint16 ,sint16 )" `248  "Memory Manipulation Prototypes:"
f N "read_bank" 2 533 ""
v L "bank" 2 533 "int8" `252 
v L "offset" 2 533 "int8" `253 
f B "read_bank" 2 533 "int8(int8 bank,int8 offset)" `251 
f N "write_bank" 2 534 ""
v L "bank" 2 534 "int8" `255 
v L "offset" 2 534 "int8" `256 
v L "value" 2 534 "int8" `257 
f B "write_bank" 2 534 "void(int8 bank,int8 offset,int8 value)" `254 
f N "strcpy" 2 535 ""
v L "dest" 2 535 "*int8" `259 
v L "src" 2 535 "*int8" `260 
f B "strcpy" 2 535 "void(*int8 dest,*int8 src)" `258 
f N "memset" 2 536 ""
v L "destination" 2 536 "*int8" `262 
v L "value" 2 536 "int8" `263 
v L "num" 2 536 "int16" `264 
f B "memset" 2 536 "void(*int8 destination,int8 value,int16 num)" `261 
f N "memcpy" 2 537 ""
v L "destination" 2 537 "*int8" `266 
v L "source" 2 537 "*int8" `267 
v L "num" 2 537 "int16" `268 
f B "memcpy" 2 537 "void(*int8 destination,*int8 source,int16 num)" `265  "String Prototypes:"
f N "toupper" 2 540 ""
v L "cvalue" 2 540 "int8" `270 
f B "toupper" 2 540 "int8(int8 cvalue)" `269 
f N "tolower" 2 541 ""
v L "cvalue" 2 541 "int8" `272 
f B "tolower" 2 541 "int8(int8 cvalue)" `271 
f N "sprintf" 2 542 ""
v L "string" 2 542 "*int8" `274 
v L "cstring" 2 542 "*int8" `275 
f B "sprintf" 2 542 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `273  "Data Manipulators Prototypes:"
f N "shift_left" 2 545 ""
v L "address" 2 545 "*int8" `278 
v L "bytes" 2 545 "int8" `279 
v L "value" 2 545 "int8" `280 
f B "shift_left" 2 545 "int8(*int8 address,int8 bytes,int8 value)" `277 
f N "shift_right" 2 546 ""
v L "address" 2 546 "*int8" `282 
v L "bytes" 2 546 "int8" `283 
v L "value" 2 546 "int8" `284 
f B "shift_right" 2 546 "int8(*int8 address,int8 bytes,int8 value)" `281 
f N "rotate_left" 2 547 ""
v L "address" 2 547 "*int8" `286 
v L "bytes" 2 547 "int8" `287 
f B "rotate_left" 2 547 "void(*int8 address,int8 bytes)" `285 
f N "rotate_right" 2 548 ""
v L "address" 2 548 "*int8" `289 
v L "bytes" 2 548 "int8" `290 
f B "rotate_right" 2 548 "void(*int8 address,int8 bytes)" `288 
f N "swap" 2 549 ""
v L "value" 2 549 "int8" `292 
f B "swap" 2 549 "void(int8 value)" `291 
f N "make8" 2 550 ""
v L "var" 2 550 "int16" `294 
v L "offset" 2 550 "int8" `295 
f B "make8" 2 550 "int8(int16 var,int8 offset)" `293 
f N "make8" 2 551 ""
v L "var" 2 551 "int32" `297 
v L "offset" 2 551 "int8" `298 
f B "make8" 2 551 "int8(int32 var,int8 offset)" `296 
f N "make16" 2 552 ""
v L "varhigh" 2 552 "int8" `300 
v L "varlow" 2 552 "int8" `301 
f B "make16" 2 552 "int16(int8 varhigh,int8 varlow)" `299 
f N "make32" 2 553 ""
v L "var1" 2 553 "int16" `303 
f B "make32" 2 553 "int32(int16 var1)" `302 
f N "make32" 2 554 ""
v L "var1" 2 554 "int16" `305 
v L "var2" 2 554 "int16" `306 
f B "make32" 2 554 "int32(int16 var1,int16 var2)" `304 
f N "make32" 2 555 ""
v L "var1" 2 555 "int16" `308 
v L "var2" 2 555 "int8" `309 
f B "make32" 2 555 "int32(int16 var1,int8 var2)" `307 
f N "make32" 2 556 ""
v L "var1" 2 556 "int16" `311 
v L "var2" 2 556 "int8" `312 
v L "var3" 2 556 "int8" `313 
f B "make32" 2 556 "int32(int16 var1,int8 var2,int8 var3)" `310 
f N "make32" 2 557 ""
v L "var1" 2 557 "int8" `315 
f B "make32" 2 557 "int32(int8 var1)" `314 
f N "make32" 2 558 ""
v L "var1" 2 558 "int8" `317 
v L "var2" 2 558 "int8" `318 
f B "make32" 2 558 "int32(int8 var1,int8 var2)" `316 
f N "make32" 2 559 ""
v L "var1" 2 559 "int8" `320 
v L "var2" 2 559 "int8" `321 
v L "var3" 2 559 "int8" `322 
f B "make32" 2 559 "int32(int8 var1,int8 var2,int8 var3)" `319 
f N "make32" 2 560 ""
v L "var1" 2 560 "int8" `324 
v L "var2" 2 560 "int8" `325 
v L "var3" 2 560 "int8" `326 
v L "var4" 2 560 "int8" `327 
f B "make32" 2 560 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `323 
f N "make32" 2 561 ""
v L "var1" 2 561 "int8" `329 
v L "var2" 2 561 "int16" `330 
f B "make32" 2 561 "int32(int8 var1,int16 var2)" `328 
f N "make32" 2 562 ""
v L "var1" 2 562 "int8" `332 
v L "var2" 2 562 "int16" `333 
v L "var3" 2 562 "int8" `334 
f B "make32" 2 562 "int32(int8 var1,int16 var2,int8 var3)" `331 
f N "make32" 2 563 ""
v L "var1" 2 563 "int8" `336 
v L "var2" 2 563 "int8" `337 
v L "var3" 2 563 "int16" `338 
f B "make32" 2 563 "int32(int8 var1,int8 var2,int16 var3)" `335 
f N "bit_set" 2 564 ""
v L "var" 2 564 "int8" `340 
v L "bit" 2 564 "int8" `341 
f B "bit_set" 2 564 "void(int8 var,int8 bit)" `339 
f N "bit_set" 2 565 ""
v L "var" 2 565 "int16" `343 
v L "bit" 2 565 "int8" `344 
f B "bit_set" 2 565 "void(int16 var,int8 bit)" `342 
f N "bit_set" 2 566 ""
v L "var" 2 566 "int32" `346 
v L "bit" 2 566 "int8" `347 
f B "bit_set" 2 566 "void(int32 var,int8 bit)" `345 
f N "bit_clear" 2 567 ""
v L "var" 2 567 "int8" `349 
v L "bit" 2 567 "int8" `350 
f B "bit_clear" 2 567 "void(int8 var,int8 bit)" `348 
f N "bit_clear" 2 568 ""
v L "var" 2 568 "int16" `352 
v L "bit" 2 568 "int8" `353 
f B "bit_clear" 2 568 "void(int16 var,int8 bit)" `351 
f N "bit_clear" 2 569 ""
v L "var" 2 569 "int32" `355 
v L "bit" 2 569 "int8" `356 
f B "bit_clear" 2 569 "void(int32 var,int8 bit)" `354 
f N "bit_test" 2 570 ""
v L "var" 2 570 "int8" `358 
v L "bit" 2 570 "int8" `359 
f B "bit_test" 2 570 "int8(int8 var,int8 bit)" `357 
f N "bit_test" 2 571 ""
v L "var" 2 571 "int16" `361 
v L "bit" 2 571 "int8" `362 
f B "bit_test" 2 571 "int8(int16 var,int8 bit)" `360 
f N "bit_test" 2 572 ""
v L "var" 2 572 "int32" `364 
v L "bit" 2 572 "int8" `365 
f B "bit_test" 2 572 "int8(int32 var,int8 bit)" `363  "#use delay() Prototypes:"
f N "delay_cycles" 2 575 ""
v L "count" 2 575 "int8" `367 
f B "delay_cycles" 2 575 "void(int8 count)" `366 
f N "delay_ms" 2 576 ""
v L "time" 2 576 "int16" `369 
f B "delay_ms" 2 576 "void(int16 time)" `368 
f N "delay_us" 2 577 ""
v L "time" 2 577 "int16" `371 
f B "delay_us" 2 577 "void(int16 time)" `370  "#use rs232() Prototypes:"
f N "putchar" 2 580 ""
v L "cdata" 2 580 "int8" `373 
f B "putchar" 2 580 "void(int8 cdata)" `372 
f N "putchar" 2 581 ""
v L "cdata" 2 581 "int8" `375 
v L "stream" 2 581 "int8" `376 
f B "putchar" 2 581 "void(int8 cdata,int8 stream)" `374 
f N "puts" 2 582 ""
v L "string" 2 582 "*int8" `378 
f B "puts" 2 582 "void(*int8 string)" `377 
f N "puts" 2 583 ""
v L "string" 2 583 "*int8" `380 
v L "stream" 2 583 "int8" `381 
f B "puts" 2 583 "void(*int8 string,int8 stream)" `379 
f N "getch" 2 584 ""
f B "getch" 2 584 "int8()" `382 
f N "getch" 2 585 ""
v L "stream" 2 585 "int8" `384 
f B "getch" 2 585 "int8(int8 stream)" `383 
f N "gets" 2 586 ""
v L "string" 2 586 "*int8" `386 
f B "gets" 2 586 "void(*int8 string)" `385 
f N "gets" 2 587 ""
v L "string" 2 587 "*int8" `388 
v L "stream" 2 587 "int8" `389 
f B "gets" 2 587 "void(*int8 string,int8 stream)" `387 
f N "kbhit" 2 588 ""
f B "kbhit" 2 588 "int8()" `390 
f N "kbhit" 2 589 ""
v L "stream" 2 589 "int8" `392 
f B "kbhit" 2 589 "int8(int8 stream)" `391 
f N "printf" 2 590 ""
v L "string" 2 590 "*int8" `394 
f B "printf" 2 590 "void(*int8 string,*int8 _VA_LIST)" `393 
f N "fprintf" 2 591 ""
v L "stream" 2 591 "int8" `397 
v L "string" 2 591 "*int8" `398 
f B "fprintf" 2 591 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `396 
f N "putc_send" 2 592 ""
f B "putc_send" 2 592 "void()" `400 
f N "fputc_send" 2 593 ""
v L "stream" 2 593 "int8" `402 
f B "fputc_send" 2 593 "void(int8 stream)" `401 
f N "rcv_buffer_full" 2 594 ""
f B "rcv_buffer_full" 2 594 "int8()" `403 
f N "rcv_buffer_full" 2 595 ""
v L "stream" 2 595 "int8" `405 
f B "rcv_buffer_full" 2 595 "int8(int8 stream)" `404 
f N "rcv_buffer_bytes" 2 596 ""
f B "rcv_buffer_bytes" 2 596 "int16()" `406 
f N "rcv_buffer_bytes" 2 597 ""
v L "stream" 2 597 "int8" `408 
f B "rcv_buffer_bytes" 2 597 "int16(int8 stream)" `407 
f N "tx_buffer_full" 2 598 ""
f B "tx_buffer_full" 2 598 "int8()" `409 
f N "tx_buffer_full" 2 599 ""
v L "stream" 2 599 "int8" `411 
f B "tx_buffer_full" 2 599 "int8(int8 stream)" `410 
f N "tx_buffer_bytes" 2 600 ""
f B "tx_buffer_bytes" 2 600 "int16()" `412 
f N "tx_buffer_bytes" 2 601 ""
v L "stream" 2 601 "int8" `414 
f B "tx_buffer_bytes" 2 601 "int16(int8 stream)" `413  "#use i2c() Prototypes:"
f N "i2c_read" 2 604 ""
f B "i2c_read" 2 604 "int8()" `415 
f N "i2c_read" 2 605 ""
v L "ack" 2 605 "int8" `417 
f B "i2c_read" 2 605 "int8(int8 ack)" `416 
f N "i2c_read" 2 606 ""
v L "stream" 2 606 "int8" `419 
v L "ack" 2 606 "int8" `420 
f B "i2c_read" 2 606 "int8(int8 stream,int8 ack)" `418 
f N "i2c_write" 2 607 ""
v L "data" 2 607 "int8" `422 
f B "i2c_write" 2 607 "int8(int8 data)" `421 
f N "i2c_write" 2 608 ""
v L "stream" 2 608 "int8" `424 
v L "data" 2 608 "int8" `425 
f B "i2c_write" 2 608 "int8(int8 stream,int8 data)" `423 
f N "i2c_start" 2 609 ""
f B "i2c_start" 2 609 "void()" `426 
f N "i2c_start" 2 610 ""
v L "stream" 2 610 "int8" `428 
f B "i2c_start" 2 610 "void(int8 stream)" `427 
f N "i2c_start" 2 611 ""
v L "stream" 2 611 "int8" `430 
v L "restart" 2 611 "int8" `431 
f B "i2c_start" 2 611 "void(int8 stream,int8 restart)" `429 
f N "i2c_stop" 2 612 ""
f B "i2c_stop" 2 612 "void()" `432 
f N "i2c_stop" 2 613 ""
v L "stream" 2 613 "int8" `434 
f B "i2c_stop" 2 613 "void(int8 stream)" `433 
f N "i2c_isr_state" 2 614 ""
f B "i2c_isr_state" 2 614 "int8()" `435 
f N "i2c_slaveaddr" 2 615 ""
v L "addr" 2 615 "int8" `437 
f B "i2c_slaveaddr" 2 615 "void(int8 addr)" `436 
f N "i2c_slaveaddr" 2 616 ""
v L "stream" 2 616 "int8" `439 
v L "addr" 2 616 "int8" `440 
f B "i2c_slaveaddr" 2 616 "void(int8 stream,int8 addr)" `438 
f N "i2c_poll" 2 617 ""
f B "i2c_poll" 2 617 "int8()" `441 
f N "i2c_poll" 2 618 ""
v L "stream" 2 618 "int8" `443 
f B "i2c_poll" 2 618 "int8(int8 stream)" `442 
f N "i2c_init" 2 619 ""
v L "baud" 2 619 "int32" `445 
f B "i2c_init" 2 619 "void(int32 baud)" `444 
f N "i2c_init" 2 620 ""
v L "stream" 2 620 "int8" `447 
v L "baud" 2 620 "int32" `448 
f B "i2c_init" 2 620 "void(int8 stream,int32 baud)" `446 
f N "i2c_transfer" 2 621 ""
v L "address" 2 621 "int8" `450 
v L "wData" 2 621 "*int8" `451 
v L "wCount" 2 621 "int8" `452 
f B "i2c_transfer" 2 621 "int8(int8 address,*int8 wData,int8 wCount)" `449 
f N "i2c_transfer" 2 622 ""
v L "address" 2 622 "int8" `454 
v L "wData" 2 622 "*int8" `455 
v L "wCount" 2 622 "int8" `456 
v L "rData" 2 622 "*int8" `457 
v L "rCount" 2 622 "*int8" `458 
f B "i2c_transfer" 2 622 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `453 
f N "i2c_transfer" 2 623 ""
v L "stream" 2 623 "int8" `460 
v L "address" 2 623 "int8" `461 
v L "wData" 2 623 "*int8" `462 
v L "wCount" 2 623 "int8" `463 
f B "i2c_transfer" 2 623 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `459 
f N "i2c_transfer" 2 624 ""
v L "stream" 2 624 "int8" `465 
v L "address" 2 624 "int8" `466 
v L "wData" 2 624 "*int8" `467 
v L "wCount" 2 624 "int8" `468 
v L "rData" 2 624 "*int8" `469 
v L "rCount" 2 624 "*int8" `470 
f B "i2c_transfer" 2 624 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `464 
f N "i2c_transfer_out" 2 625 ""
v L "address" 2 625 "int8" `472 
v L "wData" 2 625 "*int8" `473 
v L "wCount" 2 625 "int8" `474 
f B "i2c_transfer_out" 2 625 "int8(int8 address,*int8 wData,int8 wCount)" `471 
f N "i2c_transfer_out" 2 626 ""
v L "stream" 2 626 "int8" `476 
v L "address" 2 626 "int8" `477 
v L "wData" 2 626 "*int8" `478 
v L "wCount" 2 626 "int8" `479 
f B "i2c_transfer_out" 2 626 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `475 
f N "i2c_transfer_in" 2 627 ""
v L "address" 2 627 "int8" `481 
v L "rData" 2 627 "*int8" `482 
v L "rCount" 2 627 "int8" `483 
f B "i2c_transfer_in" 2 627 "int8(int8 address,*int8 rData,int8 rCount)" `480 
f N "i2c_transfer_in" 2 628 ""
v L "stream" 2 628 "int8" `485 
v L "address" 2 628 "int8" `486 
v L "rData" 2 628 "*int8" `487 
v L "rCount" 2 628 "int8" `488 
f B "i2c_transfer_in" 2 628 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `484  "#use spi() Prototypes:"
f N "spi_xfer" 2 631 ""
f B "spi_xfer" 2 631 "int8()" `489 
f N "spi_xfer" 2 632 ""
f G "spi_xfer" 2 632 "int16()" `490 
f N "spi_xfer" 2 633 ""
f G "spi_xfer" 2 633 "int32()" `490 
f N "spi_xfer" 2 634 ""
v L "data" 2 634 "int8" `491 
f B "spi_xfer" 2 634 "int8(int8 data)" `490 
f N "spi_xfer" 2 635 ""
v L "data" 2 635 "int16" `493 
f B "spi_xfer" 2 635 "int16(int16 data)" `492 
f N "spi_xfer" 2 636 ""
v L "data" 2 636 "int32" `495 
f B "spi_xfer" 2 636 "int32(int32 data)" `494 
f N "spi_xfer" 2 637 ""
v L "stream" 2 637 "int8" `497 
v L "data" 2 637 "int8" `498 
f B "spi_xfer" 2 637 "int8(int8 stream,int8 data)" `496 
f N "spi_xfer" 2 638 ""
v L "stream" 2 638 "int8" `500 
v L "data" 2 638 "int16" `501 
f B "spi_xfer" 2 638 "int16(int8 stream,int16 data)" `499 
f N "spi_xfer" 2 639 ""
v L "stream" 2 639 "int8" `503 
v L "data" 2 639 "int32" `504 
f B "spi_xfer" 2 639 "int32(int8 stream,int32 data)" `502 
f N "spi_xfer" 2 640 ""
v L "stream" 2 640 "int8" `506 
v L "data" 2 640 "int8" `507 
v L "bits" 2 640 "int8" `508 
f B "spi_xfer" 2 640 "int8(int8 stream,int8 data,int8 bits)" `505 
f N "spi_xfer" 2 641 ""
v L "stream" 2 641 "int8" `510 
v L "data" 2 641 "int16" `511 
v L "bits" 2 641 "int8" `512 
f B "spi_xfer" 2 641 "int16(int8 stream,int16 data,int8 bits)" `509 
f N "spi_xfer" 2 642 ""
v L "stream" 2 642 "int8" `514 
v L "data" 2 642 "int32" `515 
v L "bits" 2 642 "int8" `516 
f B "spi_xfer" 2 642 "int32(int8 stream,int32 data,int8 bits)" `513 
f N "spi_init" 2 643 ""
v L "baud" 2 643 "int32" `518 
f B "spi_init" 2 643 "void(int32 baud)" `517 
f N "spi_init" 2 644 ""
v L "stream" 2 644 "int8" `520 
v L "baud" 2 644 "int32" `521 
f B "spi_init" 2 644 "void(int8 stream,int32 baud)" `519 
f N "spi_speed" 2 645 ""
v L "baud" 2 645 "int32" `523 
f B "spi_speed" 2 645 "void(int32 baud)" `522 
f N "spi_speed" 2 646 ""
v L "stream" 2 646 "int8" `525 
v L "baud" 2 646 "int32" `526 
f B "spi_speed" 2 646 "void(int8 stream,int32 baud)" `524 
f N "spi_speed" 2 647 ""
v L "stream" 2 647 "int8" `528 
v L "baud" 2 647 "int32" `529 
v L "clock" 2 647 "int32" `530 
f B "spi_speed" 2 647 "void(int8 stream,int32 baud,int32 clock)" `527 
f N "spi_prewrite" 2 648 ""
v L "data" 2 648 "int8" `532 
f B "spi_prewrite" 2 648 "void(int8 data)" `531 
f N "spi_prewrite" 2 649 ""
v L "data" 2 649 "int16" `534 
f B "spi_prewrite" 2 649 "void(int16 data)" `533 
f N "spi_prewrite" 2 650 ""
v L "data" 2 650 "int32" `536 
f B "spi_prewrite" 2 650 "void(int32 data)" `535 
f N "spi_prewrite" 2 651 ""
v L "??65535" 2 651 "int8" `538 
v L "data" 2 651 "int8" `539 
f B "spi_prewrite" 2 651 "void(int8 ,int8 data)" `537 
f N "spi_prewrite" 2 652 ""
v L "??65535" 2 652 "int8" `541 
v L "data" 2 652 "int16" `542 
f B "spi_prewrite" 2 652 "void(int8 ,int16 data)" `540 
f N "spi_prewrite" 2 653 ""
v L "??65535" 2 653 "int8" `544 
v L "data" 2 653 "int32" `545 
f B "spi_prewrite" 2 653 "void(int8 ,int32 data)" `543 
f N "spi_xfer_in" 2 654 ""
f B "spi_xfer_in" 2 654 "int8()" `546 
f N "spi_xfer_in" 2 655 ""
f G "spi_xfer_in" 2 655 "int16()" `547 
f N "spi_xfer_in" 2 656 ""
f G "spi_xfer_in" 2 656 "int32()" `547 
f N "spi_xfer_in" 2 657 ""
v L "bits" 2 657 "int8" `548 
f B "spi_xfer_in" 2 657 "int8(int8 bits)" `547 
f N "spi_xfer_in" 2 658 ""
v L "bits" 2 658 "int8" `550 
f G "spi_xfer_in" 2 658 "int16(int8 bits)" `549 
f N "spi_xfer_in" 2 659 ""
v L "bits" 2 659 "int8" `550 
f G "spi_xfer_in" 2 659 "int32(int8 bits)" `549 
f N "spi_xfer_in" 2 660 ""
v L "stream" 2 660 "int8" `550 
v L "bits" 2 660 "int8" `551 
f B "spi_xfer_in" 2 660 "int8(int8 stream,int8 bits)" `549 
f N "spi_xfer_in" 2 661 ""
v L "stream" 2 661 "int8" `550 
v L "bits" 2 661 "int8" `554 
f G "spi_xfer_in" 2 661 "int16(int8 stream,int8 bits)" `552 
f N "spi_xfer_in" 2 662 ""
v L "stream" 2 662 "int8" `550 
v L "bits" 2 662 "int8" `554 
f G "spi_xfer_in" 2 662 "int32(int8 stream,int8 bits)" `552 
f N "spi_transfer" 2 663 ""
v L "wData" 2 663 "*int8" `553 
v L "rData" 2 663 "*int8" `554 
v L "count" 2 663 "int16" `555 
f B "spi_transfer" 2 663 "void(*int8 wData,*int8 rData,int16 count)" `552 
f N "spi_transfer" 2 664 ""
v L "stream" 2 664 "int8" `557 
v L "wData" 2 664 "*int8" `558 
v L "rData" 2 664 "*int8" `559 
v L "count" 2 664 "int16" `560 
f B "spi_transfer" 2 664 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `556 
f N "spi_transfer_write" 2 665 ""
v L "wData" 2 665 "*int8" `562 
v L "count" 2 665 "int16" `563 
f B "spi_transfer_write" 2 665 "void(*int8 wData,int16 count)" `561 
f N "spi_transfer_write" 2 666 ""
v L "stream" 2 666 "int8" `565 
v L "wData" 2 666 "*int8" `566 
v L "count" 2 666 "int16" `567 
f B "spi_transfer_write" 2 666 "void(int8 stream,*int8 wData,int16 count)" `564 
f N "spi_transfer_read" 2 667 ""
v L "rData" 2 667 "*int8" `569 
v L "count" 2 667 "int16" `570 
f B "spi_transfer_read" 2 667 "void(*int8 rData,int16 count)" `568 
f N "spi_transfer_read" 2 668 ""
v L "stream" 2 668 "int8" `572 
v L "rData" 2 668 "*int8" `573 
v L "count" 2 668 "int16" `574 
f B "spi_transfer_read" 2 668 "void(int8 stream,*int8 rData,int16 count)" `571  "#use rtos() Prototypes:"
f N "rtos_run" 2 671 ""
f B "rtos_run" 2 671 "void()" `575 
f N "rtos_yield" 2 672 ""
f B "rtos_yield" 2 672 "void()" `576 
f N "rtos_enable" 2 673 ""
v L "task" 2 673 "int8" `578 
f B "rtos_enable" 2 673 "void(int8 task)" `577 
f N "rtos_disable" 2 674 ""
v L "task" 2 674 "int8" `580 
f B "rtos_disable" 2 674 "void(int8 task)" `579 
f N "rtos_terminate" 2 675 ""
f B "rtos_terminate" 2 675 "void()" `581 
f N "rtos_await" 2 676 ""
v L "flag" 2 676 "int8" `583 
f B "rtos_await" 2 676 "void(int8 flag)" `582 
f N "rtos_wait" 2 677 ""
v L "sem" 2 677 "int8" `585 
f B "rtos_wait" 2 677 "void(int8 sem)" `584 
f N "rtos_signal" 2 678 ""
v L "sem" 2 678 "int8" `587 
f B "rtos_signal" 2 678 "void(int8 sem)" `586 
f N "rtos_msg_send" 2 679 ""
v L "task" 2 679 "int8" `589 
v L "msg" 2 679 "int8" `590 
f B "rtos_msg_send" 2 679 "void(int8 task,int8 msg)" `588 
f N "rtos_msg_read" 2 680 ""
f B "rtos_msg_read" 2 680 "int8()" `591 
f N "rtos_msg_poll" 2 681 ""
f B "rtos_msg_poll" 2 681 "int8()" `592 
f N "rtos_overrun" 2 682 ""
v L "task" 2 682 "int8" `594 
f B "rtos_overrun" 2 682 "int8(int8 task)" `593 
f N "rtos_stats" 2 683 ""
v L "task" 2 683 "int8" `596 
v L "stat" 2 683 "*int8" `597 
f B "rtos_stats" 2 683 "void(int8 task,*int8 stat)" `595  "#use timer() Prototypes:"
f N "get_ticks" 2 686 ""
f B "get_ticks" 2 686 "int8()" `598 
f N "get_ticks" 2 687 ""
f G "get_ticks" 2 687 "int16()" `599 
f N "get_ticks" 2 688 ""
f G "get_ticks" 2 688 "int32()" `599 
f N "get_ticks" 2 689 ""
v L "stream" 2 689 "int8" `600 
f B "get_ticks" 2 689 "int8(int8 stream)" `599 
f N "get_ticks" 2 690 ""
v L "stream" 2 690 "int8" `602 
f G "get_ticks" 2 690 "int16(int8 stream)" `601 
f N "get_ticks" 2 691 ""
v L "stream" 2 691 "int8" `602 
f G "get_ticks" 2 691 "int32(int8 stream)" `601 
f N "set_ticks" 2 692 ""
v L "value" 2 692 "int8" `602 
f B "set_ticks" 2 692 "void(int8 value)" `601 
f N "set_ticks" 2 693 ""
v L "value" 2 693 "int16" `604 
f B "set_ticks" 2 693 "void(int16 value)" `603 
f N "set_ticks" 2 694 ""
v L "value" 2 694 "int32" `606 
f B "set_ticks" 2 694 "void(int32 value)" `605 
f N "set_ticks" 2 695 ""
v L "stream" 2 695 "int8" `608 
v L "value" 2 695 "int8" `609 
f B "set_ticks" 2 695 "void(int8 stream,int8 value)" `607 
f N "set_ticks" 2 696 ""
v L "stream" 2 696 "int8" `611 
v L "value" 2 696 "int16" `612 
f B "set_ticks" 2 696 "void(int8 stream,int16 value)" `610 
f N "set_ticks" 2 697 ""
v L "stream" 2 697 "int8" `614 
v L "value" 2 697 "int32" `615 
f B "set_ticks" 2 697 "void(int8 stream,int32 value)" `613  "#use pwm() Prototypes:"
f N "pwm_on" 2 700 ""
f B "pwm_on" 2 700 "void()" `616 
f N "pwm_on" 2 701 ""
v L "stream" 2 701 "int8" `618 
f B "pwm_on" 2 701 "void(int8 stream)" `617 
f N "pwm_off" 2 702 ""
f B "pwm_off" 2 702 "void()" `619 
f N "pwm_off" 2 703 ""
v L "stream" 2 703 "int8" `621 
f B "pwm_off" 2 703 "void(int8 stream)" `620 
f N "pwm_set_duty" 2 704 ""
v L "duty" 2 704 "int16" `623 
f B "pwm_set_duty" 2 704 "void(int16 duty)" `622 
f N "pwm_set_duty" 2 705 ""
v L "stream" 2 705 "int8" `625 
v L "duty" 2 705 "int16" `626 
f B "pwm_set_duty" 2 705 "void(int8 stream,int16 duty)" `624 
f N "pwm_set_duty_percent" 2 706 ""
v L "percent" 2 706 "int16" `628 
f B "pwm_set_duty_percent" 2 706 "void(int16 percent)" `627 
f N "pwm_set_duty_percent" 2 707 ""
v L "stream" 2 707 "int8" `630 
v L "percent" 2 707 "int16" `631 
f B "pwm_set_duty_percent" 2 707 "void(int8 stream,int16 percent)" `629 
f N "pwm_set_frequency" 2 708 ""
v L "frequency" 2 708 "int32" `633 
f B "pwm_set_frequency" 2 708 "void(int32 frequency)" `632 
f N "pwm_set_frequency" 2 709 ""
v L "stream" 2 709 "int8" `635 
v L "frequency" 2 709 "int32" `636 
f B "pwm_set_frequency" 2 709 "void(int8 stream,int32 frequency)" `634 
f N "pwm_get_duty_period" 2 710 ""
f B "pwm_get_duty_period" 2 710 "int16()" `637 
f N "pwm_get_duty_period" 2 711 ""
v L "stream" 2 711 "int8" `639 
f B "pwm_get_duty_period" 2 711 "int16(int8 stream)" `638  "#use capture() Prototypes:"
f N "get_capture_time" 2 714 ""
f B "get_capture_time" 2 714 "int16()" `640 
f N "get_capture_time" 2 715 ""
v L "stream" 2 715 "int8" `642 
f B "get_capture_time" 2 715 "int16(int8 stream)" `641 
f N "get_capture_event" 2 716 ""
f B "get_capture_event" 2 716 "int8()" `643 
f N "get_capture_event" 2 717 ""
v L "stream" 2 717 "int8" `645 
f B "get_capture_event" 2 717 "int8(int8 stream)" `644  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 730 ""
v L "address" 2 730 "int16" `647 
f B "goto_address" 2 730 "void(int16 address)" `646 
f N "label_address" 2 731 ""
v L "label" 2 731 "int16" `649 
f B "label_address" 2 731 "int16(int16 label)" `648  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 734 ""
v L "address" 2 734 "int16" `651 
v L "dataptr" 2 734 "*int8" `652 
v L "count" 2 734 "int16" `653 
f B "read_program_memory" 2 734 "void(int16 address,*int8 dataptr,int16 count)" `650 
f N "read_program_eeprom" 2 735 ""
v L "address" 2 735 "int16" `655 
f B "read_program_eeprom" 2 735 "int16(int16 address)" `654  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 2 738 ""
v L "address" 2 738 "int16" `657 
f B "erase_program_eeprom" 2 738 "void(int16 address)" `656 
f N "write_program_memory" 2 739 ""
v L "address" 2 739 "int16" `659 
v L "dataptr" 2 739 "*int8" `660 
v L "count" 2 739 "int16" `661 
f B "write_program_memory" 2 739 "void(int16 address,*int8 dataptr,int16 count)" `658 
f N "write_program_eeprom" 2 740 ""
v L "address" 2 740 "int16" `663 
v L "data" 2 740 "int16" `664 
f B "write_program_eeprom" 2 740 "void(int16 address,int16 data)" `662  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 747 "unsigned int8"
f N "read_eeprom" 2 750 ""
v L "address" 2 750 "int8" `666 
f B "read_eeprom" 2 750 "int8(int8 address)" `665 
f N "write_eeprom" 2 751 ""
v L "address" 2 751 "int8" `668 
v L "value" 2 751 "int8" `669 
f B "write_eeprom" 2 751 "void(int8 address,int8 value)" `667  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 758 ""
v L "interrupt" 2 758 "int32" `671 
f B "enable_interrupts" 2 758 "void(int32 interrupt)" `670 
f N "disable_interrupts" 2 759 ""
v L "interrupt" 2 759 "int32" `673 
f B "disable_interrupts" 2 759 "void(int32 interrupt)" `672 
f N "clear_interrupt" 2 760 ""
v L "interrupt" 2 760 "int32" `675 
f B "clear_interrupt" 2 760 "void(int32 interrupt)" `674 
f N "interrupt_active" 2 761 ""
v L "interrupt" 2 761 "int32" `677 
f B "interrupt_active" 2 761 "int8(int32 interrupt)" `676 
f N "interrupt_enabled" 2 762 ""
v L "interrupt" 2 762 "int32" `679 
f B "interrupt_enabled" 2 762 "int8(int32 interrupt)" `678 
f N "ext_int_edge" 2 763 ""
v L "source" 2 763 "int8" `681 
v L "edge" 2 763 "int8" `682 
f B "ext_int_edge" 2 763 "void(int8 source,int8 edge)" `680 
f N "jump_to_isr" 2 764 ""
v L "address" 2 764 "int16" `684 
f B "jump_to_isr" 2 764 "void(int16 address)" `683  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 766 "0x40"
d G "H_TO_L" 2 767 "0"
d G "GLOBAL" 2 769 "0xF2C0"
d G "PERIPH" 2 770 "0xF240"
d G "INT_RTCC" 2 771 "0x00F220"
d G "INT_TIMER0" 2 772 "0x00F220"
d G "INT_TIMER1" 2 773 "0x009D01"
d G "INT_TIMER2" 2 774 "0x009D02"
d G "INT_TIMER3" 2 775 "0x00A002"
d G "INT_EXT_L2H" 2 776 "0x5000F210"
d G "INT_EXT_H2L" 2 777 "0x6000F210"
d G "INT_EXT" 2 778 "0x00F210"
d G "INT_EXT1_L2H" 2 779 "0x5001F008"
d G "INT_EXT1_H2L" 2 780 "0x6001F008"
d G "INT_EXT1" 2 781 "0x00F008"
d G "INT_EXT2_L2H" 2 782 "0x5002F010"
d G "INT_EXT2_H2L" 2 783 "0x6002F010"
d G "INT_EXT2" 2 784 "0x00F010"
d G "INT_RB" 2 785 "0x00FFF208"
d G "INT_PSP" 2 786 "0x009D80"
d G "INT_AD" 2 787 "0x009D40"
d G "INT_RDA" 2 788 "0x009D20"
d G "INT_TBE" 2 789 "0x009D10"
d G "INT_SSP" 2 790 "0x009D08"
d G "INT_CCP1" 2 791 "0x009D04"
d G "INT_CCP2" 2 792 "0x00A001"
d G "INT_BUSCOL" 2 793 "0x00A008"
d G "INT_LOWVOLT" 2 794 "0x00A004"
d G "INT_CANIRX" 2 795 "0x00A380"
d G "INT_CANWAKE" 2 796 "0x00A340"
d G "INT_CANERR" 2 797 "0x00A320"
d G "INT_COMP" 2 798 "0x00A040"
d G "INT_EEPROM" 2 799 "0x00A010"
d G "INT_CANTX2" 2 800 "0x00A310"
d G "INT_CANTX1" 2 801 "0x00A308"
d G "INT_CANTX0" 2 802 "0x00A304"
d G "INT_CANRX1" 2 803 "0x00A302"
d G "INT_CANRX0" 2 804 "0x00A301"
D G "LED" 1 12 "PIN_None"
D G "DELAY" 1 13 "1000"
D G "trigger" 0 4 "pin_C0"
D G "echo" 0 5 "pin_C1"
D G "dot" 0 6 "pin_E2"
V G "time" 0 10 "float" `693 
V G "distance" 0 11 "int8" `694 
V G "x" 0 12 "int8" `695 
V G "i" 0 12 "int8" `696  "* transofmation de la valeur en valeur base 16"
F N "outputValueParser" 0 17 ""
V L "value" 0 17 "int8" `698 
F G "outputValueParser" 0 17 "int8(int8 value)" `697 
V L "output" 0 18 "int8" `699 
C L "parseDist" 0 31 1 "*"
F N "parseDist" 0 34 ""
V L "time" 0 34 "float" `704 
F G "parseDist" 0 34 "int8(float time)" `703 
C L "triggerSonde" 0 38 1 "*"
F N "triggerSonde" 0 41 ""
F G "triggerSonde" 0 41 "void()" `712 
C L "MAIN" 0 47 1 "*"
F N "MAIN" 0 50 ""
F G "MAIN" 0 51 "void()" `713 
C L "MAIN" 0 47 1 "FUNCTION"
C L "MAIN" 0 47 1 "FUNCTION"
C L "MAIN" 0 47 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
