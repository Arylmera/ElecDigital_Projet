#include <main.h>
#use fast_io(C)

int b, count, i;

/*
* transofmation de la valeur en valeur base 16
*/
int outputValueParser(int value){
   int output = 0;
   if (b < 10) { output = value;}
   else {
    int x = value;
    x = x%10;
    int i = value;
    i = i/10;
    
    output = x + i*16;
   }
   return output;
}

#INT_TIMER0
void timer0_isr(){
  count++;
  clear_interrupt(INT_TIMER0);
}

/*
* récupération distance
*/
int getDist(){
   i = 0;
  set_timer0(0);
  count = 0;
  while(input(PIN_A1) && (i < 25000))
    i = count * 256 + get_timer0();
  return i; 
}

/*
* trigger de la sonde
*/
void triggerSonde(){
   output_high(PIN_C0);
   delay_us(10);
   output_low(PIN_C0);
}

/*
* wait for the echo from the sonde
*/
int waitEcho(){
   i = 0;
  set_timer0(0);
  count = 0;                             // Reset Timer0
  while(!input(PIN_C1) && (i < 1000))
    i = count * 256 + get_timer0();
  if(i > 990)
    return 0;
  else
    return 1;
   
}

/*
* fonction principale
*/
void main()
{
   setup_low_volt_detect(FALSE);
   set_tris_c(0X01000000); // set RC1 as input (ECHO)
    
   // set up timer
   clear_interrupt(INT_TIMER0);
   enable_interrupts(GLOBAL);
   enable_interrupts(INT_TIMER0);
   setup_timer_0 (T0_INTERNAL | T0_DIV_2);  
   
   while(true)
   {
   triggerSonde();
   if(waitEcho()){
      b = getDist();
      b = i/58;
   }
   output_b( outputValueParser(b) );
   }

}

